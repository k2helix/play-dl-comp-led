{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/Spotify/index.ts"],"names":[],"mappings":";;;AAAA,wCAAqC;AACrC,uCAAwE;AAsPjD,6FAtPd,sBAAY,OAsPc;AAAE,gGAtPd,yBAAe,OAsPc;AAA3C,6FAtP+B,sBAAY,OAsP/B;AArPrB,qCAAkE;AAElE,IAAI,WAA+B,CAAC;AACpC,IAAI,IAAA,oBAAU,EAAC,oBAAoB,CAAC,EAAE;IAClC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC,CAAC;IACtE,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;CAC3B;AAkBD,MAAM,OAAO,GAAG,6DAA6D,CAAC;AAC9E;;;;;;;;;;;;;;;GAeG;AACI,KAAK,UAAU,OAAO,CAAC,GAAW;IACrC,IAAI,CAAC,WAAW;QAAE,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IACnG,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IACvE,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,qCAAqC,OAAO,WAAW,WAAW,CAAC,MAAM,EAAE,EAAE;YACxG,OAAO,EAAE;gBACL,aAAa,EAAE,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,YAAY,EAAE;aACzE;SACJ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;YACpB,OAAO,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,YAAY,KAAK;YAAE,MAAM,QAAQ,CAAC;QAC9C,OAAO,IAAI,sBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;KACjD;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACtC,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,qCAAqC,OAAO,WAAW,WAAW,CAAC,MAAM,EAAE,EAAE;YACxG,OAAO,EAAE;gBACL,aAAa,EAAE,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,YAAY,EAAE;aACzE;SACJ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;YACpB,OAAO,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,YAAY,KAAK;YAAE,MAAM,QAAQ,CAAC;QAC9C,OAAO,IAAI,sBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;KACrE;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QACzC,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAC1B,wCAAwC,UAAU,WAAW,WAAW,CAAC,MAAM,EAAE,EACjF;YACI,OAAO,EAAE;gBACL,aAAa,EAAE,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,YAAY,EAAE;aACzE;SACJ,CACJ,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;YACnB,OAAO,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,YAAY,KAAK;YAAE,MAAM,QAAQ,CAAC;QAC9C,OAAO,IAAI,yBAAe,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;KACxE;;QAAM,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AAC/D,CAAC;AAzCD,0BAyCC;AACD;;;;;;;GAOG;AACH,SAAgB,WAAW,CAAC,GAAW;IACnC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAAE,OAAO,QAAQ,CAAC;IAC/C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IACvC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,OAAO,OAAO,CAAC;KAClB;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACtC,OAAO,OAAO,CAAC;KAClB;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QACzC,OAAO,UAAU,CAAC;KACrB;;QAAM,OAAO,KAAK,CAAC;AACxB,CAAC;AAXD,kCAWC;AACD;;;;GAIG;AACI,KAAK,UAAU,gBAAgB,CAAC,IAAwB,EAAE,IAAa;IAC1E,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,wCAAwC,EAAE;QACrE,OAAO,EAAE;YACL,eAAe,EAAE,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACrG,cAAc,EAAE,mCAAmC;SACtD;QACD,IAAI,EAAE,sCAAsC,IAAI,CAAC,kBAAkB,iBAAiB,SAAS,CACzF,IAAI,CAAC,YAAsB,CAC9B,EAAE;QACH,MAAM,EAAE,MAAM;KACjB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACpB,OAAO,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IACH,IAAI,QAAQ,YAAY,KAAK;QAAE,MAAM,QAAQ,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvC,WAAW,GAAG;QACV,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,aAAa,EAAE,IAAI,CAAC,aAAa;QACjC,YAAY,EAAE,IAAI,CAAC,YAAY;QAC/B,YAAY,EAAE,SAAS,CAAC,YAAY;QACpC,aAAa,EAAE,SAAS,CAAC,aAAa;QACtC,UAAU,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC;QACxC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI;QACtD,UAAU,EAAE,SAAS,CAAC,UAAU;QAChC,MAAM,EAAE,IAAI,CAAC,MAAM;KACtB,CAAC;IACF,IAAI,IAAI;QAAE,IAAA,uBAAa,EAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;SACpF;QACD,OAAO,CAAC,GAAG,CAAC,eAAe,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACpD,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,YAAY,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9C,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;KAC3D;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAnCD,4CAmCC;AACD;;;;;;;;;;GAUG;AACH,SAAgB,UAAU;IACtB,IAAI,IAAI,CAAC,GAAG,EAAE,IAAK,WAAW,CAAC,MAAiB;QAAE,OAAO,IAAI,CAAC;;QACzD,OAAO,KAAK,CAAC;AACtB,CAAC;AAHD,gCAGC;AAKD;;;;;;GAMG;AACI,KAAK,UAAU,SAAS,CAC3B,KAAa,EACb,IAAoC,EACpC,QAAgB,EAAE;IAElB,MAAM,OAAO,GAAc,EAAE,CAAC;IAC9B,IAAI,CAAC,WAAW;QAAE,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IACnG,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACtE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IAC9F,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAC1B,0CAA0C,IAAI,MAAM,KAAK,UAAU,KAAK,WAAW,WAAW,CAAC,MAAM,EAAE,EACvG;QACI,OAAO,EAAE;YACL,aAAa,EAAE,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,YAAY,EAAE;SACzE;KACJ,CACJ,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACnB,OAAO,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IACH,IAAI,QAAQ,YAAY,KAAK;QAAE,MAAM,QAAQ,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvC,IAAI,IAAI,KAAK,OAAO,EAAE;QAClB,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YAC1C,OAAO,CAAC,IAAI,CAAC,IAAI,sBAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;KACN;SAAM,IAAI,IAAI,KAAK,OAAO,EAAE;QACzB,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YAC1C,OAAO,CAAC,IAAI,CAAC,IAAI,sBAAY,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;KACN;SAAM,IAAI,IAAI,KAAK,UAAU,EAAE;QAC5B,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAa,EAAE,EAAE;YAChD,OAAO,CAAC,IAAI,CAAC,IAAI,yBAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;KACN;IACD,OAAO,OAAO,CAAC;AACnB,CAAC;AAnCD,8BAmCC;AACD;;;;;;;;;GASG;AACI,KAAK,UAAU,YAAY;IAC9B,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,wCAAwC,EAAE;QACrE,OAAO,EAAE;YACL,eAAe,EAAE,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC,QAAQ,CACnG,QAAQ,CACX,EAAE;YACH,cAAc,EAAE,mCAAmC;SACtD;QACD,IAAI,EAAE,0CAA0C,WAAW,CAAC,aAAa,EAAE;QAC3E,MAAM,EAAE,MAAM;KACjB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACpB,OAAO,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IACH,IAAI,QAAQ,YAAY,KAAK;QAAE,OAAO,KAAK,CAAC;IAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvC,WAAW,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;IAClD,WAAW,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACtD,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACpE,WAAW,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;IAC9C,IAAI,WAAW,CAAC,IAAI;QAAE,IAAA,uBAAa,EAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACrG,OAAO,IAAI,CAAC;AAChB,CAAC;AArBD,oCAqBC;AAEM,KAAK,UAAU,eAAe,CAAC,OAA2B;IAC7D,WAAW,GAAG,OAAO,CAAC;IACtB,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC;IACzB,MAAM,YAAY,EAAE,CAAC;AACzB,CAAC;AAJD,0CAIC","sourcesContent":["import { request } from '../Request';\r\nimport { SpotifyAlbum, SpotifyPlaylist, SpotifyTrack } from './classes';\r\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\r\n\r\nlet spotifyData: SpotifyDataOptions;\r\nif (existsSync('.data/spotify.data')) {\r\n    spotifyData = JSON.parse(readFileSync('.data/spotify.data', 'utf-8'));\r\n    spotifyData.file = true;\r\n}\r\n/**\r\n * Spotify Data options that are stored in spotify.data file.\r\n */\r\nexport interface SpotifyDataOptions {\r\n    client_id: string;\r\n    client_secret: string;\r\n    redirect_url?: string;\r\n    authorization_code?: string;\r\n    access_token?: string;\r\n    refresh_token?: string;\r\n    token_type?: string;\r\n    expires_in?: number;\r\n    expiry?: number;\r\n    market?: string;\r\n    file?: boolean;\r\n}\r\n\r\nconst pattern = /^((https:)?\\/\\/)?open.spotify.com\\/(track|album|playlist)\\//;\r\n/**\r\n * Gets Spotify url details.\r\n *\r\n * ```ts\r\n * let spot = await play.spotify('spotify url')\r\n *\r\n * // spot.type === \"track\" | \"playlist\" | \"album\"\r\n *\r\n * if (spot.type === \"track\") {\r\n *      spot = spot as play.SpotifyTrack\r\n *      // Code with spotify track class.\r\n * }\r\n * ```\r\n * @param url Spotify Url\r\n * @returns A {@link SpotifyTrack} or {@link SpotifyPlaylist} or {@link SpotifyAlbum}\r\n */\r\nexport async function spotify(url: string): Promise<Spotify> {\r\n    if (!spotifyData) throw new Error('Spotify Data is missing\\nDid you forgot to do authorization ?');\r\n    const url_ = url.trim();\r\n    if (!url_.match(pattern)) throw new Error('This is not a Spotify URL');\r\n    if (url_.indexOf('track/') !== -1) {\r\n        const trackID = url_.split('track/')[1].split('&')[0].split('?')[0];\r\n        const response = await request(`https://api.spotify.com/v1/tracks/${trackID}?market=${spotifyData.market}`, {\r\n            headers: {\r\n                Authorization: `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }).catch((err: Error) => {\r\n            return err;\r\n        });\r\n        if (response instanceof Error) throw response;\r\n        return new SpotifyTrack(JSON.parse(response));\r\n    } else if (url_.indexOf('album/') !== -1) {\r\n        const albumID = url.split('album/')[1].split('&')[0].split('?')[0];\r\n        const response = await request(`https://api.spotify.com/v1/albums/${albumID}?market=${spotifyData.market}`, {\r\n            headers: {\r\n                Authorization: `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }).catch((err: Error) => {\r\n            return err;\r\n        });\r\n        if (response instanceof Error) throw response;\r\n        return new SpotifyAlbum(JSON.parse(response), spotifyData, false);\r\n    } else if (url_.indexOf('playlist/') !== -1) {\r\n        const playlistID = url.split('playlist/')[1].split('&')[0].split('?')[0];\r\n        const response = await request(\r\n            `https://api.spotify.com/v1/playlists/${playlistID}?market=${spotifyData.market}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `${spotifyData.token_type} ${spotifyData.access_token}`\r\n                }\r\n            }\r\n        ).catch((err: Error) => {\r\n            return err;\r\n        });\r\n        if (response instanceof Error) throw response;\r\n        return new SpotifyPlaylist(JSON.parse(response), spotifyData, false);\r\n    } else throw new Error('URL is out of scope for play-dl.');\r\n}\r\n/**\r\n * Validate Spotify url\r\n * @param url Spotify URL\r\n * @returns\r\n * ```ts\r\n * 'track' | 'playlist' | 'album' | 'search' | false\r\n * ```\r\n */\r\nexport function sp_validate(url: string): 'track' | 'playlist' | 'album' | 'search' | false {\r\n    const url_ = url.trim();\r\n    if (!url_.startsWith('https')) return 'search';\r\n    if (!url_.match(pattern)) return false;\r\n    if (url_.indexOf('track/') !== -1) {\r\n        return 'track';\r\n    } else if (url_.indexOf('album/') !== -1) {\r\n        return 'album';\r\n    } else if (url_.indexOf('playlist/') !== -1) {\r\n        return 'playlist';\r\n    } else return false;\r\n}\r\n/**\r\n * Fuction for authorizing for spotify data.\r\n * @param data Sportify Data options to validate\r\n * @returns boolean.\r\n */\r\nexport async function SpotifyAuthorize(data: SpotifyDataOptions, file: boolean): Promise<boolean> {\r\n    const response = await request(`https://accounts.spotify.com/api/token`, {\r\n        headers: {\r\n            'Authorization': `Basic ${Buffer.from(`${data.client_id}:${data.client_secret}`).toString('base64')}`,\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: `grant_type=authorization_code&code=${data.authorization_code}&redirect_uri=${encodeURI(\r\n            data.redirect_url as string\r\n        )}`,\r\n        method: 'POST'\r\n    }).catch((err: Error) => {\r\n        return err;\r\n    });\r\n    if (response instanceof Error) throw response;\r\n    const resp_json = JSON.parse(response);\r\n    spotifyData = {\r\n        client_id: data.client_id,\r\n        client_secret: data.client_secret,\r\n        redirect_url: data.redirect_url,\r\n        access_token: resp_json.access_token,\r\n        refresh_token: resp_json.refresh_token,\r\n        expires_in: Number(resp_json.expires_in),\r\n        expiry: Date.now() + (resp_json.expires_in - 1) * 1000,\r\n        token_type: resp_json.token_type,\r\n        market: data.market\r\n    };\r\n    if (file) writeFileSync('.data/spotify.data', JSON.stringify(spotifyData, undefined, 4));\r\n    else {\r\n        console.log(`Client ID : ${spotifyData.client_id}`);\r\n        console.log(`Client Secret : ${spotifyData.client_secret}`);\r\n        console.log(`Refresh Token : ${spotifyData.refresh_token}`);\r\n        console.log(`Market : ${spotifyData.market}`);\r\n        console.log(`\\nPaste above info in setToken function.`);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Checks if spotify token is expired or not.\r\n *\r\n * Update token if returned false.\r\n * ```ts\r\n * if (play.is_expired()) {\r\n *      await play.refreshToken()\r\n * }\r\n * ```\r\n * @returns boolean\r\n */\r\nexport function is_expired(): boolean {\r\n    if (Date.now() >= (spotifyData.expiry as number)) return true;\r\n    else return false;\r\n}\r\n/**\r\n * type for Spotify Classes\r\n */\r\nexport type Spotify = SpotifyAlbum | SpotifyPlaylist | SpotifyTrack;\r\n/**\r\n * Function for searching songs on Spotify\r\n * @param query searching query\r\n * @param type \"album\" | \"playlist\" | \"track\"\r\n * @param limit max no of results\r\n * @returns Spotify type.\r\n */\r\nexport async function sp_search(\r\n    query: string,\r\n    type: 'album' | 'playlist' | 'track',\r\n    limit: number = 10\r\n): Promise<Spotify[]> {\r\n    const results: Spotify[] = [];\r\n    if (!spotifyData) throw new Error('Spotify Data is missing\\nDid you forget to do authorization ?');\r\n    if (query.length === 0) throw new Error('Pass some query to search.');\r\n    if (limit > 50 || limit < 0) throw new Error(`You crossed limit range of Spotify [ 0 - 50 ]`);\r\n    const response = await request(\r\n        `https://api.spotify.com/v1/search?type=${type}&q=${query}&limit=${limit}&market=${spotifyData.market}`,\r\n        {\r\n            headers: {\r\n                Authorization: `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }\r\n    ).catch((err: Error) => {\r\n        return err;\r\n    });\r\n    if (response instanceof Error) throw response;\r\n    const json_data = JSON.parse(response);\r\n    if (type === 'track') {\r\n        json_data.tracks.items.forEach((track: any) => {\r\n            results.push(new SpotifyTrack(track));\r\n        });\r\n    } else if (type === 'album') {\r\n        json_data.albums.items.forEach((album: any) => {\r\n            results.push(new SpotifyAlbum(album, spotifyData, true));\r\n        });\r\n    } else if (type === 'playlist') {\r\n        json_data.playlists.items.forEach((playlist: any) => {\r\n            results.push(new SpotifyPlaylist(playlist, spotifyData, true));\r\n        });\r\n    }\r\n    return results;\r\n}\r\n/**\r\n * Refreshes Token\r\n *\r\n * ```ts\r\n * if (play.is_expired()) {\r\n *      await play.refreshToken()\r\n * }\r\n * ```\r\n * @returns boolean\r\n */\r\nexport async function refreshToken(): Promise<boolean> {\r\n    const response = await request(`https://accounts.spotify.com/api/token`, {\r\n        headers: {\r\n            'Authorization': `Basic ${Buffer.from(`${spotifyData.client_id}:${spotifyData.client_secret}`).toString(\r\n                'base64'\r\n            )}`,\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: `grant_type=refresh_token&refresh_token=${spotifyData.refresh_token}`,\r\n        method: 'POST'\r\n    }).catch((err: Error) => {\r\n        return err;\r\n    });\r\n    if (response instanceof Error) return false;\r\n    const resp_json = JSON.parse(response);\r\n    spotifyData.access_token = resp_json.access_token;\r\n    spotifyData.expires_in = Number(resp_json.expires_in);\r\n    spotifyData.expiry = Date.now() + (resp_json.expires_in - 1) * 1000;\r\n    spotifyData.token_type = resp_json.token_type;\r\n    if (spotifyData.file) writeFileSync('.data/spotify.data', JSON.stringify(spotifyData, undefined, 4));\r\n    return true;\r\n}\r\n\r\nexport async function setSpotifyToken(options: SpotifyDataOptions) {\r\n    spotifyData = options;\r\n    spotifyData.file = false;\r\n    await refreshToken();\r\n}\r\n\r\nexport { SpotifyTrack, SpotifyAlbum, SpotifyPlaylist };\r\n"]}