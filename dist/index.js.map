{"version":3,"file":"index.js","sourceRoot":"","sources":["../play-dl/index.ts"],"names":[],"mappings":";;;AAAA,uCAamB;AA8df,8FA1eA,uBAAa,OA0eA;AAWb,iGApfA,0BAAgB,OAofA;AAChB,2FApfA,oBAAU,OAofA;AAnBV,8FAheA,uBAAa,OAgeA;AAoBb,4FAnfA,qBAAW,OAmfA;AAhBX,0FAleA,mBAAS,OAkeA;AATT,+FAtdA,wBAAc,OAsdA;AACd,gGAtdA,yBAAe,OAsdA;AACf,6FAtdA,sBAAY,OAsdA;AAndhB,uCAWmB;AAwdf,wFAleA,iBAAO,OAkeA;AACP,4FAleA,qBAAW,OAkeA;AANX,6FA3dA,sBAAY,OA2dA;AAFZ,2FAxdA,oBAAU,OAwdA;AAdV,6FAzcA,sBAAY,OAycA;AACZ,gGAzcA,yBAAe,OAycA;AACf,6FAzcA,sBAAY,OAycA;AApchB,6CAYsB;AA0clB,2FArdA,uBAAU,OAqdA;AADV,4FAndA,wBAAW,OAmdA;AArBX,iGA5bA,6BAAgB,OA4bA;AAehB,gGA1cA,4BAAe,OA0cA;AAhBf,mGAzbA,+BAAkB,OAybA;AAElB,gGA1bA,4BAAe,OA0bA;AApbnB,qCASkB;AAqbd,uFA7bA,eAAM,OA6bA;AAEN,4FA9bA,oBAAW,OA8bA;AADX,yGA5bA,iCAAwB,OA4bA;AAdxB,4FA5aA,oBAAW,OA4aA;AADX,+FA1aA,uBAAc,OA0aA;AADd,4FAxaA,oBAAW,OAwaA;AAraf,mCAAmC;AA6b/B,yFA7bK,gBAAQ,OA6bL;AA3bZ,IAAK,iBAMJ;AAND,WAAK,iBAAiB;IAClB,kCAAa,CAAA;IACb,4CAAuB,CAAA;IACvB,sCAAiB,CAAA;IACjB,wCAAmB,CAAA;IACnB,8CAAyB,CAAA;AAC7B,CAAC,EANI,iBAAiB,KAAjB,iBAAiB,QAMrB;AAmBD,iDAAgD;AAChD,qCAA+D;AAC/D,6CAA0G;AAC1G,6CAA6C;AAK7C;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,KAAK,UAAU,MAAM,CAAC,GAAW,EAAE,UAAyB,EAAE;IAC1D,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACxB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IAC9F,IAAI,OAAO,CAAC,QAAQ;QAAE,OAAO,MAAM,IAAA,eAAS,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC5D,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACX,wHAAwH,CAC3H,CAAC;KACL;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CACX,uHAAuH,CAC1H,CAAC;KACL;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAAE,OAAO,MAAM,IAAA,mBAAS,EAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;QAChF,OAAO,MAAM,IAAA,eAAS,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC/C,CAAC;AAqXG,wBAAM;AAvUV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,KAAK,UAAU,MAAM,CACjB,KAAa,EACb,UAAyB,EAAE;IAE3B,IAAI,CAAC,OAAO,CAAC,MAAM;QAAE,OAAO,CAAC,MAAM,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;IAC3D,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAChD,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO;QACtB,OAAO,MAAM,IAAA,kBAAS,EAAC,MAAM,EAAE;YAC3B,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO;YAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;SACrD,CAAC,CAAC;SACF,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO;QAAE,OAAO,MAAM,IAAA,mBAAS,EAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SAClG,IAAI,OAAO,CAAC,MAAM,CAAC,UAAU;QAAE,OAAO,MAAM,IAAA,sBAAS,EAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SACxG,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM;QAC1B,OAAO,MAAM,IAAA,kBAAS,EAAC,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;;QAC3G,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;AACvG,CAAC;AA8QG,wBAAM;AA1QV;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,KAAK,UAAU,gBAAgB,CAC3B,IAAgC,EAChC,UAAyB,EAAE;IAE3B,IAAI,IAAI,YAAY,4BAAe;QAAE,OAAO,MAAM,IAAA,6BAAc,EAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;QACnF,OAAO,MAAM,IAAA,yBAAc,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACpD,CAAC;AA+OG,4CAAgB;AA9OpB;;;;;;;;;;;;GAYG;AACH,KAAK,UAAU,QAAQ,CACnB,GAAW;IAeX,IAAI,KAAK,CAAC;IACV,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAAE,OAAO,QAAQ,CAAC;IAC/C,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;QAChC,KAAK,GAAG,IAAA,qBAAW,EAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAE,CAAC,KAAK,GAAG,KAAK,CAA6C,CAAC,CAAC,CAAC,KAAK,CAAC;KACjG;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1C,KAAK,GAAG,MAAM,IAAA,wBAAW,EAAC,IAAI,CAAC,CAAC;QAChC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAE,CAAC,KAAK,GAAG,KAAK,CAAgC,CAAC,CAAC,CAAC,KAAK,CAAC;KACpF;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACtC,KAAK,GAAG,MAAM,IAAA,oBAAW,EAAC,IAAI,CAAC,CAAC;QAChC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAE,CAAC,KAAK,GAAG,KAAK,CAA6C,CAAC,CAAC,CAAC,KAAK,CAAC;KACjG;SAAM;QACH,KAAK,GAAG,IAAA,qBAAW,EAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAE,CAAC,KAAK,GAAG,KAAK,CAAgC,CAAC,CAAC,CAAC,KAAK,CAAC;KACpF;AACL,CAAC;AAkMG,4BAAQ;AAjMZ;;;;;;;;;;;;GAYG;AACH,SAAS,aAAa;IAClB,MAAM,GAAG,GAAG,IAAA,+BAAe,EAAC;QACxB,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,MAAM,EAAE,OAAO,CAAC,MAAM;KACzB,CAAC,CAAC;IACH,GAAG,CAAC,QAAQ,CAAC,mDAAmD,EAAE,CAAC,GAAG,EAAE,EAAE;QACtE,IAAI,IAAa,CAAC;QAClB,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,KAAK;YAAE,IAAI,GAAG,IAAI,CAAC;aACxC,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,IAAI;YAAE,IAAI,GAAG,KAAK,CAAC;aAC7C;YACD,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YACvD,GAAG,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO;SACV;QACD,GAAG,CAAC,QAAQ,CAAC,oFAAoF,EAAE,CAAC,GAAG,EAAE,EAAE;YACvG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACpC,IAAI,SAAiB,EAAE,aAAqB,EAAE,YAAoB,EAAE,MAAc,CAAC;gBACnF,GAAG,CAAC,QAAQ,CAAC,qCAAqC,EAAE,CAAC,EAAE,EAAE,EAAE;oBACvD,SAAS,GAAG,EAAE,CAAC;oBACf,GAAG,CAAC,QAAQ,CAAC,iCAAiC,EAAE,CAAC,MAAM,EAAE,EAAE;wBACvD,aAAa,GAAG,MAAM,CAAC;wBACvB,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,CAAC,GAAG,EAAE,EAAE;4BACnD,YAAY,GAAG,GAAG,CAAC;4BACnB,OAAO,CAAC,GAAG,CACP,8IAA8I,CACjJ,CAAC;4BACF,GAAG,CAAC,QAAQ,CAAC,mDAAmD,EAAE,CAAC,GAAG,EAAE,EAAE;gCACtE,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;oCAAE,MAAM,GAAG,GAAG,CAAC;qCAC9B;oCACD,OAAO,CAAC,GAAG,CACP,6EAA6E,CAChF,CAAC;oCACF,MAAM,GAAG,IAAI,CAAC;iCACjB;gCACD,OAAO,CAAC,GAAG,CACP,oGAAoG,CACvG,CAAC;gCACF,OAAO,CAAC,GAAG,CACP,oDAAoD,SAAS,oCAAoC,SAAS,CACtG,YAAY,CACf,KAAK,CACT,CAAC;gCACF,GAAG,CAAC,QAAQ,CAAC,wCAAwC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;oCACjE,IAAI,CAAC,IAAA,oBAAU,EAAC,OAAO,CAAC;wCAAE,IAAA,mBAAS,EAAC,OAAO,CAAC,CAAC;oCAC7C,MAAM,WAAW,GAAG;wCAChB,SAAS;wCACT,aAAa;wCACb,YAAY;wCACZ,kBAAkB,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wCACzC,MAAM;qCACT,CAAC;oCACF,MAAM,KAAK,GAAG,MAAM,IAAA,0BAAgB,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oCACxD,IAAI,KAAK,KAAK,KAAK;wCAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;oCACpE,GAAG,CAAC,KAAK,EAAE,CAAC;gCAChB,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;aACN;iBAAM,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC3C,IAAI,CAAC,IAAI,EAAE;oBACP,OAAO,CAAC,GAAG,CAAC,oEAAoE,CAAC,CAAC;oBAClF,GAAG,CAAC,KAAK,EAAE,CAAC;oBACZ,OAAO;iBACV;gBACD,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;oBACtC,IAAI,SAAS,GAAG,EAAE,CAAC;oBACnB,IAAI,CAAC,SAAS,EAAE;wBACZ,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;wBAC5D,GAAG,CAAC,KAAK,EAAE,CAAC;wBACZ,OAAO;qBACV;oBACD,IAAI,CAAC,IAAA,oBAAU,EAAC,OAAO,CAAC;wBAAE,IAAA,mBAAS,EAAC,OAAO,CAAC,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;oBACrD,IAAI,MAAM,IAAA,qBAAQ,EAAC,SAAS,CAAC,EAAE;wBAC3B,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;wBAC1D,IAAA,uBAAa,EAAC,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;qBACvF;;wBAAM,OAAO,CAAC,GAAG,CAAC,2EAA2E,CAAC,CAAC;oBAChG,GAAG,CAAC,KAAK,EAAE,CAAC;gBAChB,CAAC,CAAC,CAAC;aACN;iBAAM,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC3C,IAAI,CAAC,IAAI,EAAE;oBACP,OAAO,CAAC,GAAG,CAAC,+DAA+D,CAAC,CAAC;oBAC7E,GAAG,CAAC,KAAK,EAAE,CAAC;oBACZ,OAAO;iBACV;gBACD,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAY,EAAE,EAAE;oBACxC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;wBAC5B,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;wBACzD,GAAG,CAAC,KAAK,EAAE,CAAC;wBACZ,OAAO;qBACV;oBACD,IAAI,CAAC,IAAA,oBAAU,EAAC,OAAO,CAAC;wBAAE,IAAA,mBAAS,EAAC,OAAO,CAAC,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;oBACpD,IAAI,MAAM,GAAW,EAAE,CAAC;oBACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;wBAC1B,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACzB,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC;4BAAE,OAAO;wBAC5B,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAY,CAAC;wBAC1C,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;wBACnC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC5C,CAAC,CAAC,CAAC;oBACH,IAAA,uBAAa,EAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC9E,GAAG,CAAC,KAAK,EAAE,CAAC;gBAChB,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;gBACvD,GAAG,CAAC,KAAK,EAAE,CAAC;aACf;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAmDG,sCAAa;AAlDjB;;;;;;GAMG;AACH,SAAS,eAAe,CAAC,MAAoB,EAAE,QAA0C;IAIrF,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC3D,KAAK,MAAM,OAAO,IAAI,SAAS,EAAE;QAC7B,IAAK,OAAe,CAAC,wBAAwB,EAAE;YAC3C,OAAO,EAAE,CAAC;YACV,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAuB,CAAC,CAAC;SAC1E;KACJ;IAED,MAAM,aAAa,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC7C,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC/C,MAAM,YAAY,GAAG,GAAG,EAAE;QACtB,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC/D,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QACnE,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC,CAAC;IACF,aAAa,CAAC,wBAAwB,GAAG,IAAI,CAAC;IAC9C,cAAc,CAAC,wBAAwB,GAAG,IAAI,CAAC;IAC/C,YAAY,CAAC,wBAAwB,GAAG,IAAI,CAAC;IAC7C,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IACnD,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IACvD,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACrD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AACtD,CAAC;AAgBG,0CAAe;AA6BnB,iBAAiB;AACjB,kBAAe;IACX,WAAW,EAAX,oBAAW;IACX,cAAc,EAAd,uBAAc;IACd,WAAW,EAAX,oBAAW;IACX,kBAAkB,EAAlB,+BAAkB;IAClB,gBAAgB,EAAhB,6BAAgB;IAChB,eAAe,EAAf,4BAAe;IACf,YAAY,EAAZ,sBAAY;IACZ,eAAe,EAAf,yBAAe;IACf,YAAY,EAAZ,sBAAY;IACZ,cAAc,EAAd,wBAAc;IACd,eAAe,EAAf,yBAAe;IACf,YAAY,EAAZ,sBAAY;IACZ,eAAe;IACf,aAAa;IACb,aAAa,EAAb,uBAAa;IACb,MAAM,EAAN,eAAM;IACN,wBAAwB,EAAxB,iCAAwB;IACxB,WAAW,EAAX,oBAAW;IACX,SAAS,EAAT,mBAAS;IACT,eAAe,EAAf,4BAAe;IACf,UAAU,EAAV,oBAAU;IACV,aAAa,EAAb,uBAAa;IACb,YAAY,EAAZ,sBAAY;IACZ,MAAM;IACN,QAAQ,EAAR,gBAAQ;IACR,WAAW,EAAX,wBAAW;IACX,UAAU,EAAV,uBAAU;IACV,OAAO,EAAP,iBAAO;IACP,WAAW,EAAX,qBAAW;IACX,MAAM;IACN,gBAAgB;IAChB,QAAQ;IACR,gBAAgB,EAAhB,0BAAgB;IAChB,UAAU,EAAV,oBAAU;IACV,WAAW,EAAX,qBAAW;CACd,CAAC","sourcesContent":["import {\r\n    playlist_info,\r\n    video_basic_info,\r\n    video_info,\r\n    decipher_info,\r\n    yt_validate,\r\n    extractID,\r\n    YouTube,\r\n    YouTubeStream,\r\n    YouTubeChannel,\r\n    YouTubePlayList,\r\n    YouTubeVideo,\r\n    InfoData\r\n} from './YouTube';\r\nimport {\r\n    spotify,\r\n    sp_validate,\r\n    refreshToken,\r\n    is_expired,\r\n    SpotifyAlbum,\r\n    SpotifyPlaylist,\r\n    SpotifyTrack,\r\n    Spotify,\r\n    SpotifyAuthorize,\r\n    sp_search\r\n} from './Spotify';\r\nimport {\r\n    soundcloud,\r\n    so_validate,\r\n    SoundCloud,\r\n    SoundCloudStream,\r\n    getFreeClientID,\r\n    SoundCloudPlaylist,\r\n    SoundCloudTrack,\r\n    check_id,\r\n    so_search,\r\n    stream as so_stream,\r\n    stream_from_info as so_stream_info\r\n} from './SoundCloud';\r\nimport {\r\n    deezer,\r\n    dz_validate,\r\n    dz_advanced_track_search,\r\n    Deezer,\r\n    DeezerTrack,\r\n    DeezerPlaylist,\r\n    DeezerAlbum,\r\n    dz_search\r\n} from './Deezer';\r\nimport { setToken } from './token';\r\n\r\nenum AudioPlayerStatus {\r\n    Idle = 'idle',\r\n    Buffering = 'buffering',\r\n    Paused = 'paused',\r\n    Playing = 'playing',\r\n    AutoPaused = 'autopaused'\r\n}\r\n\r\ninterface SearchOptions {\r\n    limit?: number;\r\n    source?: {\r\n        youtube?: 'video' | 'playlist' | 'channel';\r\n        spotify?: 'album' | 'playlist' | 'track';\r\n        soundcloud?: 'tracks' | 'playlists' | 'albums';\r\n        deezer?: 'track' | 'playlist' | 'album';\r\n    };\r\n    fuzzy?: boolean;\r\n    language?: string;\r\n    /**\r\n     * !!! Before enabling this for public servers, please consider using Discord features like NSFW channels as not everyone in your server wants to see NSFW images. !!!\r\n     * Unblurred images will likely have different dimensions than specified in the {@link YouTubeThumbnail} objects.\r\n     */\r\n    unblurNSFWThumbnails?: boolean;\r\n}\r\n\r\nimport { createInterface } from 'node:readline';\r\nimport { existsSync, mkdirSync, writeFileSync } from 'node:fs';\r\nimport { stream as yt_stream, StreamOptions, stream_from_info as yt_stream_info } from './YouTube/stream';\r\nimport { yt_search } from './YouTube/search';\r\nimport { EventEmitter } from 'stream';\r\n\r\nasync function stream(url: string, options: { seek?: number } & StreamOptions): Promise<YouTubeStream>;\r\nasync function stream(url: string, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;\r\n/**\r\n * Creates a Stream [ YouTube or SoundCloud ] class from a url for playing.\r\n *\r\n * Example\r\n * ```ts\r\n * const source = await play.stream('youtube video URL') // YouTube Video Stream\r\n *\r\n * const source = await play.stream('soundcloud track URL') // SoundCloud Track Stream\r\n *\r\n * const source = await play.stream('youtube video URL', { seek : 45 }) // Seeks 45 seconds (approx.) in YouTube Video Stream\r\n *\r\n * const resource = createAudioResource(source.stream, {\r\n *      inputType : source.type\r\n * }) // Use discordjs voice createAudioResource function.\r\n * ```\r\n * @param url Video / Track URL\r\n * @param options\r\n *\r\n *  - `number` seek : No of seconds to seek in stream.\r\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\r\n *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]\r\n *  - `boolean` htmldata : given data is html data or not\r\n *  - `number` precache : No of segments of data to store before looping [YouTube Live Stream only]. [ Defaults to 3 ]\r\n *  - `boolean` discordPlayerCompatibility : Conversion of Webm to Opus [ Defaults to false ]\r\n * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play\r\n */\r\nasync function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream | SoundCloudStream> {\r\n    const url_ = url.trim();\r\n    if (url_.length === 0) throw new Error('Stream URL has a length of 0. Check your url again.');\r\n    if (options.htmldata) return await yt_stream(url_, options);\r\n    if (url_.indexOf('spotify') !== -1) {\r\n        throw new Error(\r\n            'Streaming from Spotify is not supported. Please use search() to find a similar track on YouTube or SoundCloud instead.'\r\n        );\r\n    }\r\n    if (url_.indexOf('deezer') !== -1) {\r\n        throw new Error(\r\n            'Streaming from Deezer is not supported. Please use search() to find a similar track on YouTube or SoundCloud instead.'\r\n        );\r\n    }\r\n    if (url_.indexOf('soundcloud') !== -1) return await so_stream(url_, options.quality);\r\n    else return await yt_stream(url_, options);\r\n}\r\n\r\nasync function search(query: string, options: { source: { deezer: 'album' } } & SearchOptions): Promise<DeezerAlbum[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { deezer: 'playlist' } } & SearchOptions\r\n): Promise<DeezerPlaylist[]>;\r\nasync function search(query: string, options: { source: { deezer: 'track' } } & SearchOptions): Promise<DeezerTrack[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { soundcloud: 'albums' } } & SearchOptions\r\n): Promise<SoundCloudPlaylist[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { soundcloud: 'playlists' } } & SearchOptions\r\n): Promise<SoundCloudPlaylist[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { soundcloud: 'tracks' } } & SearchOptions\r\n): Promise<SoundCloudTrack[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { spotify: 'album' } } & SearchOptions\r\n): Promise<SpotifyAlbum[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { spotify: 'playlist' } } & SearchOptions\r\n): Promise<SpotifyPlaylist[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { spotify: 'track' } } & SearchOptions\r\n): Promise<SpotifyTrack[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { youtube: 'channel' } } & SearchOptions\r\n): Promise<YouTubeChannel[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { youtube: 'playlist' } } & SearchOptions\r\n): Promise<YouTubePlayList[]>;\r\nasync function search(\r\n    query: string,\r\n    options: { source: { youtube: 'video' } } & SearchOptions\r\n): Promise<YouTubeVideo[]>;\r\nasync function search(query: string, options: { limit: number } & SearchOptions): Promise<YouTubeVideo[]>;\r\nasync function search(query: string, options?: SearchOptions): Promise<YouTubeVideo[]>;\r\n/**\r\n * Searches through a particular source and gives respective info.\r\n * \r\n * Example\r\n * ```ts\r\n * const searched = await play.search('Rick Roll', { source : { youtube : \"video\" } }) // YouTube Video Search\r\n * \r\n * const searched = await play.search('Rick Roll', { limit : 1 }) // YouTube Video Search but returns only 1 video.\r\n * \r\n * const searched = await play.search('Rick Roll', { source : { spotify : \"track\" } }) // Spotify Track Search\r\n * \r\n * const searched = await play.search('Rick Roll', { source : { soundcloud : \"tracks\" } }) // SoundCloud Track Search\r\n * \r\n * const searched = await play.search('Rick Roll', { source : { deezer : \"track\" } }) // Deezer Track Search\r\n * ```\r\n * @param query string to search.\r\n * @param options\r\n * \r\n *  - `number` limit : No of searches you want to have.\r\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\r\n *  - `boolean` unblurNSFWThumbnails : Unblurs NSFW thumbnails. Defaults to `false` [ YouTube search only. ]\r\n *              !!! Before enabling this for public servers, please consider using Discord features like NSFW channels as not everyone in your server wants to see NSFW images. !!!\r\n *              Unblurred images will likely have different dimensions than specified in the {@link YouTubeThumbnail} objects.\r\n *  - `boolean` fuzzy : Whether the search should be fuzzy or only return exact matches. Defaults to `true`. [ for `Deezer` Only ]\r\n *  - `Object` source : Contains type of source and type of result you want to have\r\n * ```ts\r\n *      - youtube : 'video' | 'playlist' | 'channel';\r\n        - spotify : 'album' | 'playlist' | 'track';\r\n        - soundcloud : 'tracks' | 'playlists' | 'albums';\r\n        - deezer : 'track' | 'playlist' | 'album';\r\n    ```\r\n * @returns Array of {@link YouTube} or {@link Spotify} or {@link SoundCloud} or {@link Deezer} type\r\n */\r\nasync function search(\r\n    query: string,\r\n    options: SearchOptions = {}\r\n): Promise<YouTube[] | Spotify[] | SoundCloud[] | Deezer[]> {\r\n    if (!options.source) options.source = { youtube: 'video' };\r\n    const query_ = encodeURIComponent(query.trim());\r\n    if (options.source.youtube)\r\n        return await yt_search(query_, {\r\n            limit: options.limit,\r\n            type: options.source.youtube,\r\n            language: options.language,\r\n            unblurNSFWThumbnails: options.unblurNSFWThumbnails\r\n        });\r\n    else if (options.source.spotify) return await sp_search(query_, options.source.spotify, options.limit);\r\n    else if (options.source.soundcloud) return await so_search(query_, options.source.soundcloud, options.limit);\r\n    else if (options.source.deezer)\r\n        return await dz_search(query_, { limit: options.limit, type: options.source.deezer, fuzzy: options.fuzzy });\r\n    else throw new Error('Not possible to reach Here LOL. Easter Egg of play-dl if someone get this.');\r\n}\r\n\r\nasync function stream_from_info(info: SoundCloudTrack, options?: StreamOptions): Promise<SoundCloudStream>;\r\nasync function stream_from_info(info: InfoData, options?: StreamOptions): Promise<YouTubeStream>;\r\n/**\r\n * Creates a Stream [ YouTube or SoundCloud ] class from video or track info for playing.\r\n *\r\n * Example\r\n * ```ts\r\n * const info = await video_info('youtube URL')\r\n * const source = await play.stream_from_info(info) // YouTube Video Stream\r\n *\r\n * const soundInfo = await play.soundcloud('SoundCloud URL')\r\n * const source = await play.stream_from_info(soundInfo) // SoundCloud Track Stream\r\n *\r\n * const source = await play.stream_from_info(info, { seek : 45 }) // Seeks 45 seconds (approx.) in YouTube Video Stream\r\n *\r\n * const resource = createAudioResource(source.stream, {\r\n *      inputType : source.type\r\n * }) // Use discordjs voice createAudioResource function.\r\n * ```\r\n * @param info YouTube video info OR SoundCloud track Class\r\n * @param options\r\n *\r\n *  - `number` seek : No of seconds to seek in stream.\r\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\r\n *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]\r\n *  - `boolean` htmldata : given data is html data or not\r\n *  - `number` precache : No of segments of data to store before looping [YouTube Live Stream only]. [ Defaults to 3 ]\r\n *  - `boolean` discordPlayerCompatibility : Conversion of Webm to Opus[ Defaults to false ]\r\n * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play\r\n */\r\nasync function stream_from_info(\r\n    info: InfoData | SoundCloudTrack,\r\n    options: StreamOptions = {}\r\n): Promise<YouTubeStream | SoundCloudStream> {\r\n    if (info instanceof SoundCloudTrack) return await so_stream_info(info, options.quality);\r\n    else return await yt_stream_info(info, options);\r\n}\r\n/**\r\n * Validates url that play-dl supports.\r\n *\r\n * - `so` - SoundCloud\r\n * - `sp` - Spotify\r\n * - `dz` - Deezer\r\n * - `yt` - YouTube\r\n * @param url URL\r\n * @returns\r\n * ```ts\r\n * 'so_playlist' / 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'dz_track' | 'dz_playlist' | 'dz_album' | 'yt_video' | 'yt_playlist' | 'search' | false\r\n * ```\r\n */\r\nasync function validate(\r\n    url: string\r\n): Promise<\r\n    | 'so_playlist'\r\n    | 'so_track'\r\n    | 'sp_track'\r\n    | 'sp_album'\r\n    | 'sp_playlist'\r\n    | 'dz_track'\r\n    | 'dz_playlist'\r\n    | 'dz_album'\r\n    | 'yt_video'\r\n    | 'yt_playlist'\r\n    | 'search'\r\n    | false\r\n> {\r\n    let check;\r\n    const url_ = url.trim();\r\n    if (!url_.startsWith('https')) return 'search';\r\n    if (url_.indexOf('spotify') !== -1) {\r\n        check = sp_validate(url_);\r\n        return check !== false ? (('sp_' + check) as 'sp_track' | 'sp_album' | 'sp_playlist') : false;\r\n    } else if (url_.indexOf('soundcloud') !== -1) {\r\n        check = await so_validate(url_);\r\n        return check !== false ? (('so_' + check) as 'so_playlist' | 'so_track') : false;\r\n    } else if (url_.indexOf('deezer') !== -1) {\r\n        check = await dz_validate(url_);\r\n        return check !== false ? (('dz_' + check) as 'dz_track' | 'dz_playlist' | 'dz_album') : false;\r\n    } else {\r\n        check = yt_validate(url_);\r\n        return check !== false ? (('yt_' + check) as 'yt_video' | 'yt_playlist') : false;\r\n    }\r\n}\r\n/**\r\n * Authorization interface for Spotify, SoundCloud and YouTube.\r\n *\r\n * Either stores info in `.data` folder or shows relevant data to be used in `setToken` function.\r\n *\r\n * ```ts\r\n * const play = require('play-dl')\r\n *\r\n * play.authorization()\r\n * ```\r\n *\r\n * Just run the above command and you will get a interface asking some questions.\r\n */\r\nfunction authorization(): void {\r\n    const ask = createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n    ask.question('Do you want to save data in a file ? (Yes / No): ', (msg) => {\r\n        let file: boolean;\r\n        if (msg.toLowerCase() === 'yes') file = true;\r\n        else if (msg.toLowerCase() === 'no') file = false;\r\n        else {\r\n            console.log(\"That option doesn't exist. Try again...\");\r\n            ask.close();\r\n            return;\r\n        }\r\n        ask.question('Choose your service - sc (for SoundCloud) / sp (for Spotify)  / yo (for YouTube): ', (msg) => {\r\n            if (msg.toLowerCase().startsWith('sp')) {\r\n                let client_id: string, client_secret: string, redirect_url: string, market: string;\r\n                ask.question('Start by entering your Client ID : ', (id) => {\r\n                    client_id = id;\r\n                    ask.question('Now enter your Client Secret : ', (secret) => {\r\n                        client_secret = secret;\r\n                        ask.question('Enter your Redirect URL now : ', (url) => {\r\n                            redirect_url = url;\r\n                            console.log(\r\n                                '\\nIf you would like to know your region code visit : \\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \\n'\r\n                            );\r\n                            ask.question('Enter your region code (2-letter country code) : ', (mar) => {\r\n                                if (mar.length === 2) market = mar;\r\n                                else {\r\n                                    console.log(\r\n                                        \"That doesn't look like a valid region code, IN will be selected as default.\"\r\n                                    );\r\n                                    market = 'IN';\r\n                                }\r\n                                console.log(\r\n                                    '\\nNow open your browser and paste the below url, then authorize it and copy the redirected url. \\n'\r\n                                );\r\n                                console.log(\r\n                                    `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(\r\n                                        redirect_url\r\n                                    )} \\n`\r\n                                );\r\n                                ask.question('Paste the url which you just copied : ', async (url) => {\r\n                                    if (!existsSync('.data')) mkdirSync('.data');\r\n                                    const spotifyData = {\r\n                                        client_id,\r\n                                        client_secret,\r\n                                        redirect_url,\r\n                                        authorization_code: url.split('code=')[1],\r\n                                        market\r\n                                    };\r\n                                    const check = await SpotifyAuthorize(spotifyData, file);\r\n                                    if (check === false) throw new Error('Failed to get access token.');\r\n                                    ask.close();\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            } else if (msg.toLowerCase().startsWith('sc')) {\r\n                if (!file) {\r\n                    console.log('You already had a client ID, just paste that in setToken function.');\r\n                    ask.close();\r\n                    return;\r\n                }\r\n                ask.question('Client ID : ', async (id) => {\r\n                    let client_id = id;\r\n                    if (!client_id) {\r\n                        console.log(\"You didn't provide a client ID. Try again...\");\r\n                        ask.close();\r\n                        return;\r\n                    }\r\n                    if (!existsSync('.data')) mkdirSync('.data');\r\n                    console.log('Validating your client ID, hold on...');\r\n                    if (await check_id(client_id)) {\r\n                        console.log('Client ID has been validated successfully.');\r\n                        writeFileSync('.data/soundcloud.data', JSON.stringify({ client_id }, undefined, 4));\r\n                    } else console.log(\"That doesn't look like a valid client ID. Retry with a correct client ID.\");\r\n                    ask.close();\r\n                });\r\n            } else if (msg.toLowerCase().startsWith('yo')) {\r\n                if (!file) {\r\n                    console.log('You already had cookie, just paste that in setToken function.');\r\n                    ask.close();\r\n                    return;\r\n                }\r\n                ask.question('Cookies : ', (cook: string) => {\r\n                    if (!cook || cook.length === 0) {\r\n                        console.log(\"You didn't provide a cookie. Try again...\");\r\n                        ask.close();\r\n                        return;\r\n                    }\r\n                    if (!existsSync('.data')) mkdirSync('.data');\r\n                    console.log('Cookies has been added successfully.');\r\n                    let cookie: Object = {};\r\n                    cook.split(';').forEach((x) => {\r\n                        const arr = x.split('=');\r\n                        if (arr.length <= 1) return;\r\n                        const key = arr.shift()?.trim() as string;\r\n                        const value = arr.join('=').trim();\r\n                        Object.assign(cookie, { [key]: value });\r\n                    });\r\n                    writeFileSync('.data/youtube.data', JSON.stringify({ cookie }, undefined, 4));\r\n                    ask.close();\r\n                });\r\n            } else {\r\n                console.log(\"That option doesn't exist. Try again...\");\r\n                ask.close();\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Attaches paused, playing, autoPaused Listeners to discordjs voice AudioPlayer.\r\n *\r\n * Useful if you don't want extra data to be downloaded by play-dl.\r\n * @param player discordjs voice AudioPlayer\r\n * @param resource A {@link YouTubeStream} or {@link SoundCloudStream}\r\n */\r\nfunction attachListeners(player: EventEmitter, resource: YouTubeStream | SoundCloudStream) {\r\n    // cleanup existing listeners if they are still registered\r\n    type listenerType = (...args: any[]) => void;\r\n\r\n    const listeners = player.listeners(AudioPlayerStatus.Idle);\r\n    for (const cleanup of listeners) {\r\n        if ((cleanup as any).__playDlAttachedListener) {\r\n            cleanup();\r\n            player.removeListener(AudioPlayerStatus.Idle, cleanup as listenerType);\r\n        }\r\n    }\r\n\r\n    const pauseListener = () => resource.pause();\r\n    const resumeListener = () => resource.resume();\r\n    const idleListener = () => {\r\n        player.removeListener(AudioPlayerStatus.Paused, pauseListener);\r\n        player.removeListener(AudioPlayerStatus.AutoPaused, pauseListener);\r\n        player.removeListener(AudioPlayerStatus.Playing, resumeListener);\r\n    };\r\n    pauseListener.__playDlAttachedListener = true;\r\n    resumeListener.__playDlAttachedListener = true;\r\n    idleListener.__playDlAttachedListener = true;\r\n    player.on(AudioPlayerStatus.Paused, pauseListener);\r\n    player.on(AudioPlayerStatus.AutoPaused, pauseListener);\r\n    player.on(AudioPlayerStatus.Playing, resumeListener);\r\n    player.once(AudioPlayerStatus.Idle, idleListener);\r\n}\r\n\r\n// Export Main Commands\r\nexport {\r\n    DeezerAlbum,\r\n    DeezerPlaylist,\r\n    DeezerTrack,\r\n    SoundCloudPlaylist,\r\n    SoundCloudStream,\r\n    SoundCloudTrack,\r\n    SpotifyAlbum,\r\n    SpotifyPlaylist,\r\n    SpotifyTrack,\r\n    YouTubeChannel,\r\n    YouTubePlayList,\r\n    YouTubeVideo,\r\n    attachListeners,\r\n    authorization,\r\n    decipher_info,\r\n    deezer,\r\n    dz_advanced_track_search,\r\n    dz_validate,\r\n    extractID,\r\n    getFreeClientID,\r\n    is_expired,\r\n    playlist_info,\r\n    refreshToken,\r\n    search,\r\n    setToken,\r\n    so_validate,\r\n    soundcloud,\r\n    spotify,\r\n    sp_validate,\r\n    stream,\r\n    stream_from_info,\r\n    validate,\r\n    video_basic_info,\r\n    video_info,\r\n    yt_validate,\r\n    InfoData\r\n};\r\n\r\n// Export Types\r\nexport { Deezer, YouTube, SoundCloud, Spotify, YouTubeStream };\r\n\r\n// Export Default\r\nexport default {\r\n    DeezerAlbum,\r\n    DeezerPlaylist,\r\n    DeezerTrack,\r\n    SoundCloudPlaylist,\r\n    SoundCloudStream,\r\n    SoundCloudTrack,\r\n    SpotifyAlbum,\r\n    SpotifyPlaylist,\r\n    SpotifyTrack,\r\n    YouTubeChannel,\r\n    YouTubePlayList,\r\n    YouTubeVideo,\r\n    attachListeners,\r\n    authorization,\r\n    decipher_info,\r\n    deezer,\r\n    dz_advanced_track_search,\r\n    dz_validate,\r\n    extractID,\r\n    getFreeClientID,\r\n    is_expired,\r\n    playlist_info,\r\n    refreshToken,\r\n    search,\r\n    setToken,\r\n    so_validate,\r\n    soundcloud,\r\n    spotify,\r\n    sp_validate,\r\n    stream,\r\n    stream_from_info,\r\n    validate,\r\n    video_basic_info,\r\n    video_info,\r\n    yt_validate\r\n};\r\n"]}