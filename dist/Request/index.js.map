{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/Request/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { IncomingMessage } from 'node:http';\r\nimport { RequestOptions, request as httpsRequest } from 'node:https';\r\nimport { URL } from 'node:url';\r\nimport { BrotliDecompress, Deflate, Gunzip, createGunzip, createBrotliDecompress, createDeflate } from 'node:zlib';\r\nimport { cookieHeaders, getCookies } from '../YouTube/utils/cookie';\r\nimport { getRandomUserAgent } from './useragent';\r\n\r\ninterface RequestOpts extends RequestOptions {\r\n    body?: string;\r\n    method?: 'GET' | 'POST' | 'HEAD';\r\n    cookies?: boolean;\r\n    cookieJar?: { [key: string]: string };\r\n}\r\n\r\n/**\r\n * Main module which play-dl uses to make a request to stream url.\r\n * @param url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns IncomingMessage from the request\r\n */\r\nexport function request_stream(req_url: string, options: RequestOpts = { method: 'GET' }): Promise<IncomingMessage> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(req_url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await request_stream(res.headers.location as string, options);\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n/**\r\n * Makes a request and follows redirects if necessary\r\n * @param req_url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns A promise with the final response object\r\n */\r\nfunction internalRequest(req_url: string, options: RequestOpts = { method: 'GET' }): Promise<IncomingMessage> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(req_url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await internalRequest(res.headers.location as string, options);\r\n        } else if (Number(res.statusCode) > 400) {\r\n            reject(new Error(`Got ${res.statusCode} from the request`));\r\n            return;\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n/**\r\n * Main module which play-dl uses to make a request\r\n * @param url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns body of that request\r\n */\r\nexport function request(req_url: string, options: RequestOpts = { method: 'GET' }): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let cookies_added = false;\r\n        if (options.cookies) {\r\n            let cook = getCookies();\r\n            if (typeof cook === 'string' && options.headers) {\r\n                Object.assign(options.headers, { cookie: cook });\r\n                cookies_added = true;\r\n            }\r\n        }\r\n        if (options.cookieJar) {\r\n            const cookies = [];\r\n            for (const cookie of Object.entries(options.cookieJar)) {\r\n                cookies.push(cookie.join('='));\r\n            }\r\n\r\n            if (cookies.length !== 0) {\r\n                if (!options.headers) options.headers = {};\r\n                const existingCookies = cookies_added ? `; ${options.headers.cookie}` : '';\r\n                Object.assign(options.headers, { cookie: `${cookies.join('; ')}${existingCookies}` });\r\n            }\r\n        }\r\n        if (options.headers) {\r\n            options.headers = {\r\n                ...options.headers,\r\n                'accept-encoding': 'gzip, deflate, br',\r\n                'user-agent': getRandomUserAgent()\r\n            };\r\n        }\r\n        const res = await internalRequest(req_url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (res.headers && res.headers['set-cookie']) {\r\n            if (options.cookieJar) {\r\n                for (const cookie of res.headers['set-cookie']) {\r\n                    const parts = cookie.split(';')[0].trim().split('=');\r\n                    options.cookieJar[parts.shift() as string] = parts.join('=');\r\n                }\r\n            }\r\n            if (cookies_added) {\r\n                cookieHeaders(res.headers['set-cookie']);\r\n            }\r\n        }\r\n        const data: string[] = [];\r\n        let decoder: BrotliDecompress | Gunzip | Deflate | undefined = undefined;\r\n        const encoding = res.headers['content-encoding'];\r\n        if (encoding === 'gzip') decoder = createGunzip();\r\n        else if (encoding === 'br') decoder = createBrotliDecompress();\r\n        else if (encoding === 'deflate') decoder = createDeflate();\r\n\r\n        if (decoder) {\r\n            res.pipe(decoder);\r\n            decoder.setEncoding('utf-8');\r\n            decoder.on('data', (c) => data.push(c));\r\n            decoder.on('end', () => resolve(data.join('')));\r\n        } else {\r\n            res.setEncoding('utf-8');\r\n            res.on('data', (c) => data.push(c));\r\n            res.on('end', () => resolve(data.join('')));\r\n        }\r\n    });\r\n}\r\n\r\nexport function request_resolve_redirect(url: string): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(url, { method: 'HEAD' }).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        const statusCode = Number(res.statusCode);\r\n        if (statusCode < 300) {\r\n            resolve(url);\r\n        } else if (statusCode < 400) {\r\n            const resolved = await request_resolve_redirect(res.headers.location as string).catch((err) => err);\r\n            if (resolved instanceof Error) {\r\n                reject(resolved);\r\n                return;\r\n            }\r\n\r\n            resolve(resolved);\r\n        } else {\r\n            reject(new Error(`${res.statusCode}: ${res.statusMessage}, ${url}`));\r\n        }\r\n    });\r\n}\r\n\r\nexport function request_content_length(url: string): Promise<number> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(url, { method: 'HEAD' }).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        const statusCode = Number(res.statusCode);\r\n        if (statusCode < 300) {\r\n            resolve(Number(res.headers['content-length']));\r\n        } else if (statusCode < 400) {\r\n            const newURL = await request_resolve_redirect(res.headers.location as string).catch((err) => err);\r\n            if (newURL instanceof Error) {\r\n                reject(newURL);\r\n                return;\r\n            }\r\n\r\n            const res2 = await request_content_length(newURL).catch((err) => err);\r\n            if (res2 instanceof Error) {\r\n                reject(res2);\r\n                return;\r\n            }\r\n\r\n            resolve(res2);\r\n        } else {\r\n            reject(\r\n                new Error(`Failed to get content length with error: ${res.statusCode}, ${res.statusMessage}, ${url}`)\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Main module that play-dl uses for making a https request\r\n * @param req_url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns Incoming Message from the https request\r\n */\r\nfunction https_getter(req_url: string, options: RequestOpts = {}): Promise<IncomingMessage> {\r\n    return new Promise((resolve, reject) => {\r\n        const s = new URL(req_url);\r\n        options.method ??= 'GET';\r\n        const req_options: RequestOptions = {\r\n            host: s.hostname,\r\n            path: s.pathname + s.search,\r\n            headers: options.headers ?? {},\r\n            method: options.method\r\n        };\r\n\r\n        const req = httpsRequest(req_options, resolve);\r\n        req.on('error', (err) => {\r\n            reject(err);\r\n        });\r\n        if (options.method === 'POST') req.write(options.body);\r\n        req.end();\r\n    });\r\n}\r\n"]}