{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { YouTubeVideo } from '../classes/Video';\r\nimport { YouTubePlayList } from '../classes/Playlist';\r\nimport { YouTubeChannel } from '../classes/Channel';\r\nimport { YouTube } from '..';\r\nimport { YouTubeThumbnail } from '../classes/Thumbnail';\r\n\r\nconst BLURRED_THUMBNAILS = [\r\n    '-oaymwEpCOADEI4CSFryq4qpAxsIARUAAAAAGAElAADIQj0AgKJDeAHtAZmZGUI=',\r\n    '-oaymwEiCOADEI4CSFXyq4qpAxQIARUAAIhCGAFwAcABBu0BmZkZQg==',\r\n    '-oaymwEiCOgCEMoBSFXyq4qpAxQIARUAAIhCGAFwAcABBu0BZmbmQQ==',\r\n    '-oaymwEiCNAFEJQDSFXyq4qpAxQIARUAAIhCGAFwAcABBu0BZmZmQg==',\r\n    '-oaymwEdCNAFEJQDSFryq4qpAw8IARUAAIhCGAHtAWZmZkI=',\r\n    '-oaymwEdCNACELwBSFryq4qpAw8IARUAAIhCGAHtAT0K10E='\r\n];\r\n\r\nexport interface ParseSearchInterface {\r\n    type?: 'video' | 'playlist' | 'channel';\r\n    limit?: number;\r\n    language?: string;\r\n    unblurNSFWThumbnails?: boolean;\r\n}\r\n\r\nexport interface thumbnail {\r\n    width: string;\r\n    height: string;\r\n    url: string;\r\n}\r\n/**\r\n * Main command which converts html body data and returns the type of data requested.\r\n * @param html body of that request\r\n * @param options limit & type of YouTube search you want.\r\n * @returns Array of one of YouTube type.\r\n */\r\nexport function ParseSearchResult(html: string, options?: ParseSearchInterface): YouTube[] {\r\n    if (!html) throw new Error(\"Can't parse Search result without data\");\r\n    if (!options) options = { type: 'video', limit: 0 };\r\n    else if (!options.type) options.type = 'video';\r\n    const hasLimit = typeof options.limit === 'number' && options.limit > 0;\r\n    options.unblurNSFWThumbnails ??= false;\r\n\r\n    const data = html\r\n        .split('var ytInitialData = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/;\\s*(var|const|let)\\s/)[0];\r\n    const json_data = JSON.parse(data);\r\n    const results = [];\r\n    const details =\r\n        json_data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents.flatMap(\r\n            (s: any) => s.itemSectionRenderer?.contents\r\n        );\r\n    for (const detail of details) {\r\n        if (hasLimit && results.length === options.limit) break;\r\n        if (!detail || (!detail.videoRenderer && !detail.channelRenderer && !detail.playlistRenderer)) continue;\r\n        switch (options.type) {\r\n            case 'video': {\r\n                const parsed = parseVideo(detail);\r\n                if (parsed) {\r\n                    if (options.unblurNSFWThumbnails) parsed.thumbnails.forEach(unblurThumbnail);\r\n                    results.push(parsed);\r\n                }\r\n                break;\r\n            }\r\n            case 'channel': {\r\n                const parsed = parseChannel(detail);\r\n                if (parsed) results.push(parsed);\r\n                break;\r\n            }\r\n            case 'playlist': {\r\n                const parsed = parsePlaylist(detail);\r\n                if (parsed) {\r\n                    if (options.unblurNSFWThumbnails && parsed.thumbnail) unblurThumbnail(parsed.thumbnail);\r\n                    results.push(parsed);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                throw new Error(`Unknown search type: ${options.type}`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n * Function to convert [hour : minutes : seconds] format to seconds\r\n * @param duration hour : minutes : seconds format\r\n * @returns seconds\r\n */\r\nfunction parseDuration(duration: string): number {\r\n    if (!duration) return 0;\r\n    const args = duration.split(':');\r\n    let dur = 0;\r\n\r\n    switch (args.length) {\r\n        case 3:\r\n            dur = parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\r\n            break;\r\n        case 2:\r\n            dur = parseInt(args[0]) * 60 + parseInt(args[1]);\r\n            break;\r\n        default:\r\n            dur = parseInt(args[0]);\r\n    }\r\n\r\n    return dur;\r\n}\r\n/**\r\n * Function to parse Channel searches\r\n * @param data body of that channel request.\r\n * @returns YouTubeChannel class\r\n */\r\nexport function parseChannel(data?: any): YouTubeChannel {\r\n    if (!data || !data.channelRenderer) throw new Error('Failed to Parse YouTube Channel');\r\n    const badge = data.channelRenderer.ownerBadges?.[0]?.metadataBadgeRenderer?.style?.toLowerCase();\r\n    const url = `https://www.youtube.com${\r\n        data.channelRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n        data.channelRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n    }`;\r\n    const thumbnail = data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1];\r\n    const res = new YouTubeChannel({\r\n        id: data.channelRenderer.channelId,\r\n        name: data.channelRenderer.title.simpleText,\r\n        icon: {\r\n            url: thumbnail.url.replace('//', 'https://'),\r\n            width: thumbnail.width,\r\n            height: thumbnail.height\r\n        },\r\n        url: url,\r\n        verified: Boolean(badge?.includes('verified')),\r\n        artist: Boolean(badge?.includes('artist')),\r\n        subscribers: data.channelRenderer.subscriberCountText?.simpleText ?? '0 subscribers'\r\n    });\r\n\r\n    return res;\r\n}\r\n/**\r\n * Function to parse Video searches\r\n * @param data body of that video request.\r\n * @returns YouTubeVideo class\r\n */\r\nexport function parseVideo(data?: any): YouTubeVideo {\r\n    if (!data || !data.videoRenderer) throw new Error('Failed to Parse YouTube Video');\r\n\r\n    const channel = data.videoRenderer.ownerText.runs[0];\r\n    const badge = data.videoRenderer.ownerBadges?.[0]?.metadataBadgeRenderer?.style?.toLowerCase();\r\n    const durationText = data.videoRenderer.lengthText;\r\n    const res = new YouTubeVideo({\r\n        id: data.videoRenderer.videoId,\r\n        url: `https://www.youtube.com/watch?v=${data.videoRenderer.videoId}`,\r\n        title: data.videoRenderer.title.runs[0].text,\r\n        description: data.videoRenderer.detailedMetadataSnippets?.[0].snippetText.runs?.length\r\n            ? data.videoRenderer.detailedMetadataSnippets[0].snippetText.runs.map((run: any) => run.text).join('')\r\n            : '',\r\n        duration: durationText ? parseDuration(durationText.simpleText) : 0,\r\n        duration_raw: durationText ? durationText.simpleText : null,\r\n        thumbnails: data.videoRenderer.thumbnail.thumbnails,\r\n        channel: {\r\n            id: channel.navigationEndpoint.browseEndpoint.browseId || null,\r\n            name: channel.text || null,\r\n            url: `https://www.youtube.com${\r\n                channel.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n                channel.navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n            }`,\r\n            icons: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\r\n                .thumbnails,\r\n            verified: Boolean(badge?.includes('verified')),\r\n            artist: Boolean(badge?.includes('artist'))\r\n        },\r\n        uploadedAt: data.videoRenderer.publishedTimeText?.simpleText ?? null,\r\n        upcoming: data.videoRenderer.upcomingEventData?.startTime\r\n            ? new Date(parseInt(data.videoRenderer.upcomingEventData.startTime) * 1000)\r\n            : undefined,\r\n        views: data.videoRenderer.viewCountText?.simpleText?.replace(/\\D/g, '') ?? 0,\r\n        live: durationText ? false : true\r\n    });\r\n\r\n    return res;\r\n}\r\n/**\r\n * Function to parse Playlist searches\r\n * @param data body of that playlist request.\r\n * @returns YouTubePlaylist class\r\n */\r\nexport function parsePlaylist(data?: any): YouTubePlayList {\r\n    if (!data || !data.playlistRenderer) throw new Error('Failed to Parse YouTube Playlist');\r\n\r\n    const thumbnail =\r\n        data.playlistRenderer.thumbnails[0].thumbnails[data.playlistRenderer.thumbnails[0].thumbnails.length - 1];\r\n    const channel = data.playlistRenderer.shortBylineText.runs?.[0];\r\n\r\n    const res = new YouTubePlayList(\r\n        {\r\n            id: data.playlistRenderer.playlistId,\r\n            title: data.playlistRenderer.title.simpleText,\r\n            thumbnail: {\r\n                id: data.playlistRenderer.playlistId,\r\n                url: thumbnail.url,\r\n                height: thumbnail.height,\r\n                width: thumbnail.width\r\n            },\r\n            channel: {\r\n                id: channel?.navigationEndpoint.browseEndpoint.browseId,\r\n                name: channel?.text,\r\n                url: `https://www.youtube.com${channel?.navigationEndpoint.commandMetadata.webCommandMetadata.url}`\r\n            },\r\n            videos: parseInt(data.playlistRenderer.videoCount.replace(/\\D/g, ''))\r\n        },\r\n        true\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\nfunction unblurThumbnail(thumbnail: YouTubeThumbnail) {\r\n    if (BLURRED_THUMBNAILS.find((sqp) => thumbnail.url.includes(sqp))) {\r\n        thumbnail.url = thumbnail.url.split('?')[0];\r\n\r\n        // we need to update the size parameters as the sqp parameter also included a cropped size\r\n        switch (thumbnail.url.split('/').at(-1)!.split('.')[0]) {\r\n            case 'hq2':\r\n            case 'hqdefault':\r\n                thumbnail.width = 480;\r\n                thumbnail.height = 360;\r\n                break;\r\n            case 'hq720':\r\n                thumbnail.width = 1280;\r\n                thumbnail.height = 720;\r\n                break;\r\n            case 'sddefault':\r\n                thumbnail.width = 640;\r\n                thumbnail.height = 480;\r\n                break;\r\n            case 'mqdefault':\r\n                thumbnail.width = 320;\r\n                thumbnail.height = 180;\r\n                break;\r\n            case 'default':\r\n                thumbnail.width = 120;\r\n                thumbnail.height = 90;\r\n                break;\r\n            default:\r\n                thumbnail.width = thumbnail.height = NaN;\r\n        }\r\n    }\r\n}\r\n"]}