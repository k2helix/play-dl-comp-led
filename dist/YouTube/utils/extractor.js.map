{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from './../../Request/index';\r\nimport { format_decipher } from './cipher';\r\nimport { VideoChapter, YouTubeVideo } from '../classes/Video';\r\nimport { YouTubePlayList } from '../classes/Playlist';\r\nimport { InfoData, StreamInfoData } from './constants';\r\nimport { URL, URLSearchParams } from 'node:url';\r\nimport { parseAudioFormats } from '../stream';\r\n\r\ninterface InfoOptions {\r\n    htmldata?: boolean;\r\n    language?: string;\r\n}\r\n\r\ninterface PlaylistOptions {\r\n    incomplete?: boolean;\r\n    language?: string;\r\n}\r\n\r\nconst video_id_pattern = /^[a-zA-Z\\d_-]{11,12}$/;\r\nconst playlist_id_pattern = /^(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{10,}$/;\r\nconst DEFAULT_API_KEY = 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8';\r\nconst video_pattern =\r\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m|music)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|shorts\\/|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?$/;\r\nconst playlist_pattern =\r\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m|music)\\.)?((?:youtube\\.com|youtu.be))\\/(?:(playlist|watch))?(.*)?((\\?|\\&)list=)(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{10,}(&.*)?$/;\r\n/**\r\n * Validate YouTube URL or ID.\r\n *\r\n * **CAUTION :** If your search word is 11 or 12 characters long, you might get it validated as video ID.\r\n *\r\n * To avoid above, add one more condition to yt_validate\r\n * ```ts\r\n * if (url.startsWith('https') && yt_validate(url) === 'video') {\r\n *      // YouTube Video Url.\r\n * }\r\n * ```\r\n * @param url YouTube URL OR ID\r\n * @returns\r\n * ```\r\n * 'playlist' | 'video' | 'search' | false\r\n * ```\r\n */\r\nexport function yt_validate(url: string): 'playlist' | 'video' | 'search' | false {\r\n    const url_ = url.trim();\r\n    if (url_.indexOf('list=') === -1) {\r\n        if (url_.startsWith('https')) {\r\n            if (url_.match(video_pattern)) {\r\n                let id: string;\r\n                if (url_.includes('youtu.be/')) id = url_.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else if (url_.includes('youtube.com/embed/'))\r\n                    id = url_.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else if (url_.includes('youtube.com/shorts/'))\r\n                    id = url_.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else id = url_.split('watch?v=')[1]?.split(/(\\?|\\/|&)/)[0];\r\n                if (id?.match(video_id_pattern)) return 'video';\r\n                else return false;\r\n            } else return false;\r\n        } else {\r\n            if (url_.match(video_id_pattern)) return 'video';\r\n            else if (url_.match(playlist_id_pattern)) return 'playlist';\r\n            else return 'search';\r\n        }\r\n    } else {\r\n        if (!url_.match(playlist_pattern)) return yt_validate(url_.replace(/(\\?|\\&)list=[^&]+/, ''));\r\n        else return 'playlist';\r\n    }\r\n}\r\n/**\r\n * Extracts the video ID from a YouTube URL.\r\n *\r\n * Will return the value of `urlOrId` if it looks like a video ID.\r\n * @param urlOrId A YouTube URL or video ID\r\n * @returns the video ID or `false` if it can't find a video ID.\r\n */\r\nfunction extractVideoId(urlOrId: string): string | false {\r\n    if (urlOrId.startsWith('https://') && urlOrId.match(video_pattern)) {\r\n        let id: string;\r\n        if (urlOrId.includes('youtu.be/')) {\r\n            id = urlOrId.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\r\n        } else if (urlOrId.includes('youtube.com/embed/')) {\r\n            id = urlOrId.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\r\n        } else if (urlOrId.includes('youtube.com/shorts/')) {\r\n            id = urlOrId.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\r\n        } else {\r\n            id = (urlOrId.split('watch?v=')[1] ?? urlOrId.split('&v=')[1]).split(/(\\?|\\/|&)/)[0];\r\n        }\r\n\r\n        if (id.match(video_id_pattern)) return id;\r\n    } else if (urlOrId.match(video_id_pattern)) {\r\n        return urlOrId;\r\n    }\r\n\r\n    return false;\r\n}\r\n/**\r\n * Extract ID of YouTube url.\r\n * @param url ID or url of YouTube\r\n * @returns ID of video or playlist.\r\n */\r\nexport function extractID(url: string): string {\r\n    const check = yt_validate(url);\r\n    if (!check || check === 'search') throw new Error('This is not a YouTube url or videoId or PlaylistID');\r\n    const url_ = url.trim();\r\n    if (url_.startsWith('https')) {\r\n        if (url_.indexOf('list=') === -1) {\r\n            const video_id = extractVideoId(url_);\r\n            if (!video_id) throw new Error('This is not a YouTube url or videoId or PlaylistID');\r\n            return video_id;\r\n        } else {\r\n            return url_.split('list=')[1].split('&')[0];\r\n        }\r\n    } else return url_;\r\n}\r\n/**\r\n * Basic function to get data from a YouTube url or ID.\r\n *\r\n * Example\r\n * ```ts\r\n * const video = await play.video_basic_info('youtube video url')\r\n *\r\n * const res = ... // Any https package get function.\r\n *\r\n * const video = await play.video_basic_info(res.body, { htmldata : true })\r\n * ```\r\n * @param url YouTube url or ID or html body data\r\n * @param options Video Info Options\r\n *  - `boolean` htmldata : given data is html data or not\r\n * @returns Video Basic Info {@link InfoData}.\r\n */\r\nexport async function video_basic_info(url: string, options: InfoOptions = {}): Promise<InfoData> {\r\n    if (typeof url !== 'string') throw new Error('url parameter is not a URL string or a string of HTML');\r\n    const url_ = url.trim();\r\n    let body: string;\r\n    const cookieJar = {};\r\n    if (options.htmldata) {\r\n        body = url_;\r\n    } else {\r\n        const video_id = extractVideoId(url_);\r\n        if (!video_id) throw new Error('This is not a YouTube Watch URL');\r\n        const new_url = `https://www.youtube.com/watch?v=${video_id}&has_verified=1`;\r\n        body = await request(new_url, {\r\n            headers: {\r\n                'accept-language': options.language || 'en-US;q=0.9'\r\n            },\r\n            cookies: true,\r\n            cookieJar\r\n        });\r\n    }\r\n    if (body.indexOf('Our systems have detected unusual traffic from your computer network.') !== -1)\r\n        throw new Error('Captcha page: YouTube has detected that you are a bot!');\r\n    const player_data = body\r\n        .split('var ytInitialPlayerResponse = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/(?<=}}});\\s*(var|const|let)\\s/)[0];\r\n    if (!player_data) throw new Error('Initial Player Response Data is undefined.');\r\n    const initial_data = body\r\n        .split('var ytInitialData = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/;\\s*(var|const|let)\\s/)[0];\r\n    if (!initial_data) throw new Error('Initial Response Data is undefined.');\r\n    const player_response = JSON.parse(player_data);\r\n    const initial_response = JSON.parse(initial_data);\r\n    const vid = player_response.videoDetails;\r\n\r\n    let discretionAdvised = false;\r\n    let upcoming = false;\r\n    if (player_response.playabilityStatus.status !== 'OK') {\r\n        if (player_response.playabilityStatus.status === 'CONTENT_CHECK_REQUIRED') {\r\n            if (options.htmldata)\r\n                throw new Error(\r\n                    `Accepting the viewer discretion is not supported when using htmldata, video: ${vid.videoId}`\r\n                );\r\n            discretionAdvised = true;\r\n            const cookies =\r\n                initial_response.topbar.desktopTopbarRenderer.interstitial?.consentBumpV2Renderer.agreeButton\r\n                    .buttonRenderer.command.saveConsentAction;\r\n            if (cookies) {\r\n                Object.assign(cookieJar, {\r\n                    VISITOR_INFO1_LIVE: cookies.visitorCookie,\r\n                    CONSENT: cookies.consentCookie\r\n                });\r\n            }\r\n\r\n            const updatedValues = await acceptViewerDiscretion(vid.videoId, cookieJar, body, true);\r\n            player_response.streamingData = updatedValues.streamingData;\r\n            initial_response.contents.twoColumnWatchNextResults.secondaryResults = updatedValues.relatedVideos;\r\n        } else if (player_response.playabilityStatus.status === 'LIVE_STREAM_OFFLINE') upcoming = true;\r\n        else\r\n            throw new Error(\r\n                `While getting info from url\\n${\r\n                    player_response.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason.simpleText ??\r\n                    player_response.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText ??\r\n                    player_response.playabilityStatus.reason\r\n                }`\r\n            );\r\n    }\r\n    const ownerInfo =\r\n        initial_response.contents.twoColumnWatchNextResults.results?.results?.contents[1]?.videoSecondaryInfoRenderer\r\n            ?.owner?.videoOwnerRenderer;\r\n    const badge = ownerInfo?.badges?.[0]?.metadataBadgeRenderer?.style?.toLowerCase();\r\n    const html5player = `https://www.youtube.com${body.split('\"jsUrl\":\"')[1].split('\"')[0]}`;\r\n    const related: string[] = [];\r\n    initial_response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results.forEach(\r\n        (res: any) => {\r\n            if (res.compactVideoRenderer)\r\n                related.push(`https://www.youtube.com/watch?v=${res.compactVideoRenderer.videoId}`);\r\n            if (res.itemSectionRenderer?.contents)\r\n                res.itemSectionRenderer.contents.forEach((x: any) => {\r\n                    if (x.compactVideoRenderer)\r\n                        related.push(`https://www.youtube.com/watch?v=${x.compactVideoRenderer.videoId}`);\r\n                });\r\n        }\r\n    );\r\n    const microformat = player_response.microformat.playerMicroformatRenderer;\r\n    const musicInfo =\r\n        initial_response.contents.twoColumnWatchNextResults.results.results.contents?.[1]?.videoSecondaryInfoRenderer\r\n            ?.metadataRowContainer?.metadataRowContainerRenderer?.rows;\r\n    const music: any[] = [];\r\n    if (musicInfo) {\r\n        musicInfo.forEach((x: any) => {\r\n            if (!x.metadataRowRenderer) return;\r\n            const row = x.metadataRowRenderer;\r\n\r\n            const title = row.title.simpleText ?? row.title.runs[0].text;\r\n            const contents = row.contents[0].simpleText ?? row.contents[0]?.runs?.[0]?.text;\r\n            const url = row.contents[0]?.runs?.[0]?.navigationEndpoint?.commandMetadata?.webCommandMetadata.url;\r\n\r\n            if (music.length === 0) music.push({});\r\n\r\n            music[music.length - 1][title.toLowerCase()] = url ? {text: contents, url: `https://www.youtube.com${url}`} : contents;\r\n\r\n            if (row.hasDividerLine) music.push({});\r\n        });\r\n    }\r\n    const rawChapters =\r\n        initial_response.playerOverlays.playerOverlayRenderer.decoratedPlayerBarRenderer?.decoratedPlayerBarRenderer.playerBar?.multiMarkersPlayerBarRenderer.markersMap.find(\r\n            (m: any) => m.key === 'DESCRIPTION_CHAPTERS'\r\n        )?.value?.chapters;\r\n    const chapters: VideoChapter[] = [];\r\n    if (rawChapters) {\r\n        for (const { chapterRenderer } of rawChapters) {\r\n            chapters.push({\r\n                title: chapterRenderer.title.simpleText,\r\n                timestamp: parseSeconds(chapterRenderer.timeRangeStartMillis / 1000),\r\n                seconds: chapterRenderer.timeRangeStartMillis / 1000,\r\n                thumbnails: chapterRenderer.thumbnail.thumbnails\r\n            });\r\n        }\r\n    }\r\n    let upcomingDate;\r\n    if (upcoming) {\r\n        if (microformat.liveBroadcastDetails.startTimestamp)\r\n            upcomingDate = new Date(microformat.liveBroadcastDetails.startTimestamp);\r\n        else {\r\n            const timestamp =\r\n                player_response.playabilityStatus.liveStreamability.liveStreamabilityRenderer.offlineSlate\r\n                    .liveStreamOfflineSlateRenderer.scheduledStartTime;\r\n            upcomingDate = new Date(parseInt(timestamp) * 1000);\r\n        }\r\n    }\r\n    const video_details = new YouTubeVideo({\r\n        id: vid.videoId,\r\n        title: vid.title,\r\n        description: vid.shortDescription,\r\n        duration: Number(vid.lengthSeconds),\r\n        duration_raw: parseSeconds(vid.lengthSeconds),\r\n        uploadedAt: microformat.publishDate,\r\n        liveAt: microformat.liveBroadcastDetails?.startTimestamp,\r\n        upcoming: upcomingDate,\r\n        thumbnails: vid.thumbnail.thumbnails,\r\n        channel: {\r\n            name: vid.author,\r\n            id: vid.channelId,\r\n            url: `https://www.youtube.com/channel/${vid.channelId}`,\r\n            verified: Boolean(badge?.includes('verified')),\r\n            artist: Boolean(badge?.includes('artist')),\r\n            icons: ownerInfo?.thumbnail?.thumbnails || undefined\r\n        },\r\n        views: vid.viewCount,\r\n        tags: vid.keywords,\r\n        likes: parseInt(\r\n            initial_response.contents.twoColumnWatchNextResults.results.results.contents\r\n                .find((content: any) => content.videoPrimaryInfoRenderer)\r\n                ?.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons?.find(\r\n                    (button: any) => button.toggleButtonRenderer.defaultIcon.iconType === 'LIKE'\r\n                )\r\n                ?.toggleButtonRenderer.defaultText.accessibility?.accessibilityData.label.replace(/\\D+/g, '') ?? 0\r\n        ),\r\n        live: vid.isLiveContent,\r\n        private: vid.isPrivate,\r\n        discretionAdvised,\r\n        music,\r\n        chapters\r\n    });\r\n    let format = [];\r\n    if (!upcoming) {\r\n        format.push(...(player_response.streamingData.formats ?? []));\r\n        format.push(...(player_response.streamingData.adaptiveFormats ?? []));\r\n\r\n        // get the formats for the android player for legacy videos\r\n        // fixes the stream being closed because not enough data\r\n        // arrived in time for ffmpeg to be able to extract audio data\r\n        if (parseAudioFormats(format).length === 0 && !options.htmldata) {\r\n            format = await getAndroidFormats(vid.videoId, cookieJar, body);\r\n        }\r\n    }\r\n    const LiveStreamData = {\r\n        isLive: video_details.live,\r\n        dashManifestUrl: player_response.streamingData?.dashManifestUrl ?? null,\r\n        hlsManifestUrl: player_response.streamingData?.hlsManifestUrl ?? null\r\n    };\r\n    return {\r\n        LiveStreamData,\r\n        html5player,\r\n        format,\r\n        video_details,\r\n        related_videos: related\r\n    };\r\n}\r\n/**\r\n * Gets the data required for streaming from YouTube url, ID or html body data and deciphers it.\r\n *\r\n * Internal function used by {@link stream} instead of {@link video_info}\r\n * because it only extracts the information required for streaming.\r\n *\r\n * @param url YouTube url or ID or html body data\r\n * @param options Video Info Options\r\n *  - `boolean` htmldata : given data is html data or not\r\n * @returns Deciphered Video Info {@link StreamInfoData}.\r\n */\r\nexport async function video_stream_info(url: string, options: InfoOptions = {}): Promise<StreamInfoData> {\r\n    if (typeof url !== 'string') throw new Error('url parameter is not a URL string or a string of HTML');\r\n    let body: string;\r\n    const cookieJar = {};\r\n    if (options.htmldata) {\r\n        body = url;\r\n    } else {\r\n        const video_id = extractVideoId(url);\r\n        if (!video_id) throw new Error('This is not a YouTube Watch URL');\r\n        const new_url = `https://www.youtube.com/watch?v=${video_id}&has_verified=1`;\r\n        body = await request(new_url, {\r\n            headers: { 'accept-language': 'en-US,en;q=0.9' },\r\n            cookies: true,\r\n            cookieJar\r\n        });\r\n    }\r\n    if (body.indexOf('Our systems have detected unusual traffic from your computer network.') !== -1)\r\n        throw new Error('Captcha page: YouTube has detected that you are a bot!');\r\n    const player_data = body\r\n        .split('var ytInitialPlayerResponse = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/(?<=}}});\\s*(var|const|let)\\s/)[0];\r\n    if (!player_data) throw new Error('Initial Player Response Data is undefined.');\r\n    const player_response = JSON.parse(player_data);\r\n    let upcoming = false;\r\n    if (player_response.playabilityStatus.status !== 'OK') {\r\n        if (player_response.playabilityStatus.status === 'CONTENT_CHECK_REQUIRED') {\r\n            if (options.htmldata)\r\n                throw new Error(\r\n                    `Accepting the viewer discretion is not supported when using htmldata, video: ${player_response.videoDetails.videoId}`\r\n                );\r\n\r\n            const initial_data = body\r\n                .split('var ytInitialData = ')?.[1]\r\n                ?.split(';</script>')[0]\r\n                .split(/;\\s*(var|const|let)\\s/)[0];\r\n            if (!initial_data) throw new Error('Initial Response Data is undefined.');\r\n\r\n            const cookies =\r\n                JSON.parse(initial_data).topbar.desktopTopbarRenderer.interstitial?.consentBumpV2Renderer.agreeButton\r\n                    .buttonRenderer.command.saveConsentAction;\r\n            if (cookies) {\r\n                Object.assign(cookieJar, {\r\n                    VISITOR_INFO1_LIVE: cookies.visitorCookie,\r\n                    CONSENT: cookies.consentCookie\r\n                });\r\n            }\r\n\r\n            const updatedValues = await acceptViewerDiscretion(\r\n                player_response.videoDetails.videoId,\r\n                cookieJar,\r\n                body,\r\n                false\r\n            );\r\n            player_response.streamingData = updatedValues.streamingData;\r\n        } else if (player_response.playabilityStatus.status === 'LIVE_STREAM_OFFLINE') upcoming = true;\r\n        else\r\n            throw new Error(\r\n                `While getting info from url\\n${\r\n                    player_response.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason.simpleText ??\r\n                    player_response.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText ??\r\n                    player_response.playabilityStatus.reason\r\n                }`\r\n            );\r\n    }\r\n    const html5player = `https://www.youtube.com${body.split('\"jsUrl\":\"')[1].split('\"')[0]}`;\r\n    const duration = Number(player_response.videoDetails.lengthSeconds);\r\n    const video_details = {\r\n        url: `https://www.youtube.com/watch?v=${player_response.videoDetails.videoId}`,\r\n        durationInSec: (duration < 0 ? 0 : duration) || 0\r\n    };\r\n    let format = [];\r\n    if (!upcoming) {\r\n        format.push(...(player_response.streamingData.formats ?? []));\r\n        format.push(...(player_response.streamingData.adaptiveFormats ?? []));\r\n\r\n        // get the formats for the android player for legacy videos\r\n        // fixes the stream being closed because not enough data\r\n        // arrived in time for ffmpeg to be able to extract audio data\r\n        if (parseAudioFormats(format).length === 0 && !options.htmldata) {\r\n            format = await getAndroidFormats(player_response.videoDetails.videoId, cookieJar, body);\r\n        }\r\n    }\r\n\r\n    const LiveStreamData = {\r\n        isLive: player_response.videoDetails.isLiveContent,\r\n        dashManifestUrl: player_response.streamingData?.dashManifestUrl ?? null,\r\n        hlsManifestUrl: player_response.streamingData?.hlsManifestUrl ?? null\r\n    };\r\n    return await decipher_info(\r\n        {\r\n            LiveStreamData,\r\n            html5player,\r\n            format,\r\n            video_details\r\n        },\r\n        true\r\n    );\r\n}\r\n/**\r\n * Function to convert seconds to [hour : minutes : seconds] format\r\n * @param seconds seconds to convert\r\n * @returns [hour : minutes : seconds] format\r\n */\r\nfunction parseSeconds(seconds: number): string {\r\n    const d = Number(seconds);\r\n    const h = Math.floor(d / 3600);\r\n    const m = Math.floor((d % 3600) / 60);\r\n    const s = Math.floor((d % 3600) % 60);\r\n\r\n    const hDisplay = h > 0 ? (h < 10 ? `0${h}` : h) + ':' : '';\r\n    const mDisplay = m > 0 ? (m < 10 ? `0${m}` : m) + ':' : '00:';\r\n    const sDisplay = s > 0 ? (s < 10 ? `0${s}` : s) : '00';\r\n    return hDisplay + mDisplay + sDisplay;\r\n}\r\n/**\r\n * Gets data from YouTube url or ID or html body data and deciphers it.\r\n * ```\r\n * video_basic_info + decipher_info = video_info\r\n * ```\r\n *\r\n * Example\r\n * ```ts\r\n * const video = await play.video_info('youtube video url')\r\n *\r\n * const res = ... // Any https package get function.\r\n *\r\n * const video = await play.video_info(res.body, { htmldata : true })\r\n * ```\r\n * @param url YouTube url or ID or html body data\r\n * @param options Video Info Options\r\n *  - `boolean` htmldata : given data is html data or not\r\n * @returns Deciphered Video Info {@link InfoData}.\r\n */\r\nexport async function video_info(url: string, options: InfoOptions = {}): Promise<InfoData> {\r\n    const data = await video_basic_info(url.trim(), options);\r\n    return await decipher_info(data);\r\n}\r\n/**\r\n * Function uses data from video_basic_info and deciphers it if it contains signatures.\r\n * @param data Data - {@link InfoData}\r\n * @param audio_only `boolean` - To decipher only audio formats only.\r\n * @returns Deciphered Video Info {@link InfoData}\r\n */\r\nexport async function decipher_info<T extends InfoData | StreamInfoData>(\r\n    data: T,\r\n    audio_only: boolean = false\r\n): Promise<T> {\r\n    if (\r\n        data.LiveStreamData.isLive === true &&\r\n        data.LiveStreamData.dashManifestUrl !== null &&\r\n        data.video_details.durationInSec === 0\r\n    ) {\r\n        return data;\r\n    } else if (data.format.length > 0 && (data.format[0].signatureCipher || data.format[0].cipher)) {\r\n        if (audio_only) data.format = parseAudioFormats(data.format);\r\n        data.format = await format_decipher(data.format, data.html5player);\r\n        return data;\r\n    } else return data;\r\n}\r\n/**\r\n * Gets YouTube playlist info from a playlist url.\r\n *\r\n * Example\r\n * ```ts\r\n * const playlist = await play.playlist_info('youtube playlist url')\r\n *\r\n * const playlist = await play.playlist_info('youtube playlist url', { incomplete : true })\r\n * ```\r\n * @param url Playlist URL\r\n * @param options Playlist Info Options\r\n * - `boolean` incomplete : When this is set to `false` (default) this function will throw an error\r\n *                          if the playlist contains hidden videos.\r\n *                          If it is set to `true`, it parses the playlist skipping the hidden videos,\r\n *                          only visible videos are included in the resulting {@link YouTubePlaylist}.\r\n *\r\n * @returns YouTube Playlist\r\n */\r\nexport async function playlist_info(url: string, options: PlaylistOptions = {}): Promise<YouTubePlayList> {\r\n    if (!url || typeof url !== 'string') throw new Error(`Expected playlist url, received ${typeof url}!`);\r\n    let url_ = url.trim();\r\n    if (!url_.startsWith('https')) url_ = `https://www.youtube.com/playlist?list=${url_}`;\r\n    if (url_.indexOf('list=') === -1) throw new Error('This is not a Playlist URL');\r\n\r\n    if (url_.includes('music.youtube.com')) {\r\n        const urlObj = new URL(url_);\r\n        urlObj.hostname = 'www.youtube.com';\r\n        url_ = urlObj.toString();\r\n    }\r\n\r\n    const body = await request(url_, {\r\n        headers: {\r\n            'accept-language': options.language || 'en-US;q=0.9'\r\n        }\r\n    });\r\n    if (body.indexOf('Our systems have detected unusual traffic from your computer network.') !== -1)\r\n        throw new Error('Captcha page: YouTube has detected that you are a bot!');\r\n    const response = JSON.parse(\r\n        body\r\n            .split('var ytInitialData = ')[1]\r\n            .split(';</script>')[0]\r\n            .split(/;\\s*(var|const|let)\\s/)[0]\r\n    );\r\n    if (response.alerts) {\r\n        if (response.alerts[0].alertWithButtonRenderer?.type === 'INFO') {\r\n            if (!options.incomplete)\r\n                throw new Error(\r\n                    `While parsing playlist url\\n${response.alerts[0].alertWithButtonRenderer.text.simpleText}`\r\n                );\r\n        } else if (response.alerts[0].alertRenderer?.type === 'ERROR')\r\n            throw new Error(`While parsing playlist url\\n${response.alerts[0].alertRenderer.text.runs[0].text}`);\r\n        else throw new Error('While parsing playlist url\\nUnknown Playlist Error');\r\n    }\r\n    if (url_.indexOf('watch?v=') !== -1) {\r\n        return getWatchPlaylist(response, body, url_);\r\n    } else return getNormalPlaylist(response, body);\r\n}\r\n/**\r\n * Function to parse Playlist from YouTube search\r\n * @param data html data of that request\r\n * @param limit No. of videos to parse\r\n * @returns Array of YouTubeVideo.\r\n */\r\nexport function getPlaylistVideos(data: any, limit = Infinity): YouTubeVideo[] {\r\n    const videos = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (limit === videos.length) break;\r\n        const info = data[i].playlistVideoRenderer;\r\n        if (!info || !info.shortBylineText) continue;\r\n\r\n        videos.push(\r\n            new YouTubeVideo({\r\n                id: info.videoId,\r\n                duration: parseInt(info.lengthSeconds) || 0,\r\n                duration_raw: info.lengthText?.simpleText ?? '0:00',\r\n                thumbnails: info.thumbnail.thumbnails,\r\n                title: info.title.runs[0].text,\r\n                upcoming: info.upcomingEventData?.startTime\r\n                    ? new Date(parseInt(info.upcomingEventData.startTime) * 1000)\r\n                    : undefined,\r\n                channel: {\r\n                    id: info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.browseId || undefined,\r\n                    name: info.shortBylineText.runs[0].text || undefined,\r\n                    url: `https://www.youtube.com${\r\n                        info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n                        info.shortBylineText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n                    }`,\r\n                    icon: undefined\r\n                }\r\n            })\r\n        );\r\n    }\r\n    return videos;\r\n}\r\n/**\r\n * Function to get Continuation Token\r\n * @param data html data of playlist url\r\n * @returns token\r\n */\r\nexport function getContinuationToken(data: any): string {\r\n    return data.find((x: any) => Object.keys(x)[0] === 'continuationItemRenderer')?.continuationItemRenderer\r\n        .continuationEndpoint?.continuationCommand?.token;\r\n}\r\n\r\nasync function acceptViewerDiscretion(\r\n    videoId: string,\r\n    cookieJar: { [key: string]: string },\r\n    body: string,\r\n    extractRelated: boolean\r\n): Promise<{ streamingData: any; relatedVideos?: any }> {\r\n    const apiKey =\r\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\r\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\r\n        DEFAULT_API_KEY;\r\n    const sessionToken =\r\n        body.split('\"XSRF_TOKEN\":\"')[1]?.split('\"')[0].replaceAll('\\\\u003d', '=') ??\r\n        body.split('\"xsrf_token\":\"')[1]?.split('\"')[0].replaceAll('\\\\u003d', '=');\r\n    if (!sessionToken)\r\n        throw new Error(`Unable to extract XSRF_TOKEN to accept the viewer discretion popup for video: ${videoId}.`);\r\n\r\n    const verificationResponse = await request(`https://www.youtube.com/youtubei/v1/verify_age?key=${apiKey}&prettyPrint=false`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            context: {\r\n                client: {\r\n                    utcOffsetMinutes: 0,\r\n                    gl: 'US',\r\n                    hl: 'en',\r\n                    clientName: 'WEB',\r\n                    clientVersion:\r\n                        body.split('\"INNERTUBE_CONTEXT_CLIENT_VERSION\":\"')[1]?.split('\"')[0] ??\r\n                        body.split('\"innertube_context_client_version\":\"')[1]?.split('\"')[0] ??\r\n                        '<some version>'\r\n                },\r\n                user: {},\r\n                request: {}\r\n            },\r\n            nextEndpoint: {\r\n                urlEndpoint: {\r\n                    url: `watch?v=${videoId}`\r\n                }\r\n            },\r\n            setControvercy: true\r\n        }),\r\n        cookies: true,\r\n        cookieJar\r\n    });\r\n\r\n    const endpoint = JSON.parse(verificationResponse).actions[0].navigateAction.endpoint;\r\n\r\n    const videoPage = await request(`https://www.youtube.com/${endpoint.urlEndpoint.url}&pbj=1`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: new URLSearchParams([\r\n            ['command', JSON.stringify(endpoint)],\r\n            ['session_token', sessionToken]\r\n        ]).toString(),\r\n        cookies: true,\r\n        cookieJar\r\n    });\r\n\r\n    if (videoPage.includes('<h1>Something went wrong</h1>'))\r\n        throw new Error(`Unable to accept the viewer discretion popup for video: ${videoId}`);\r\n\r\n    const videoPageData = JSON.parse(videoPage);\r\n\r\n    if (videoPageData[2].playerResponse.playabilityStatus.status !== 'OK')\r\n        throw new Error(\r\n            `While getting info from url after trying to accept the discretion popup for video ${videoId}\\n${\r\n                videoPageData[2].playerResponse.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason\r\n                    .simpleText ??\r\n                videoPageData[2].playerResponse.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText\r\n            }`\r\n        );\r\n\r\n    const streamingData = videoPageData[2].playerResponse.streamingData;\r\n\r\n    if (extractRelated)\r\n        return {\r\n            streamingData,\r\n            relatedVideos: videoPageData[3].response.contents.twoColumnWatchNextResults.secondaryResults\r\n        };\r\n\r\n    return { streamingData };\r\n}\r\n\r\nasync function getAndroidFormats(videoId: string, cookieJar: { [key: string]: string }, body: string): Promise<any[]> {\r\n    const apiKey =\r\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\r\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\r\n        DEFAULT_API_KEY;\r\n\r\n    const response = await request(`https://www.youtube.com/youtubei/v1/player?key=${apiKey}&prettyPrint=false`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            context: {\r\n                client: {\r\n                    clientName: 'ANDROID',\r\n                    clientVersion: '16.49',\r\n                    hl: 'en',\r\n                    timeZone: 'UTC',\r\n                    utcOffsetMinutes: 0\r\n                }\r\n            },\r\n            videoId: videoId,\r\n            playbackContext: { contentPlaybackContext: { html5Preference: 'HTML5_PREF_WANTS' } },\r\n            contentCheckOk: true,\r\n            racyCheckOk: true\r\n        }),\r\n        cookies: true,\r\n        cookieJar\r\n    });\r\n\r\n    return JSON.parse(response).streamingData.formats;\r\n}\r\n\r\nfunction getWatchPlaylist(response: any, body: any, url: string): YouTubePlayList {\r\n    const playlist_details = response.contents.twoColumnWatchNextResults.playlist.playlist;\r\n\r\n    const videos = getWatchPlaylistVideos(playlist_details.contents);\r\n    const API_KEY =\r\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\r\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\r\n        DEFAULT_API_KEY;\r\n\r\n    const videoCount = playlist_details.totalVideos;\r\n    const channel = playlist_details.shortBylineText?.runs?.[0];\r\n    const badge = playlist_details.badges?.[0]?.metadataBadgeRenderer?.style.toLowerCase();\r\n\r\n    return new YouTubePlayList({\r\n        continuation: {\r\n            api: API_KEY,\r\n            token: getContinuationToken(playlist_details.contents),\r\n            clientVersion:\r\n                body.split('\"INNERTUBE_CONTEXT_CLIENT_VERSION\":\"')[1]?.split('\"')[0] ??\r\n                body.split('\"innertube_context_client_version\":\"')[1]?.split('\"')[0] ??\r\n                '<some version>'\r\n        },\r\n        id: playlist_details.playlistId || '',\r\n        title: playlist_details.title || '',\r\n        videoCount: parseInt(videoCount) || 0,\r\n        videos: videos,\r\n        url: url,\r\n        channel: {\r\n            id: channel?.navigationEndpoint?.browseEndpoint?.browseId || null,\r\n            name: channel?.text || null,\r\n            url: `https://www.youtube.com${\r\n                channel?.navigationEndpoint?.browseEndpoint?.canonicalBaseUrl ||\r\n                channel?.navigationEndpoint?.commandMetadata?.webCommandMetadata?.url\r\n            }`,\r\n            verified: Boolean(badge?.includes('verified')),\r\n            artist: Boolean(badge?.includes('artist'))\r\n        }\r\n    });\r\n}\r\n\r\nfunction getNormalPlaylist(response: any, body: any): YouTubePlayList {\r\n    const json_data =\r\n        response.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0]\r\n            .itemSectionRenderer.contents[0].playlistVideoListRenderer.contents;\r\n    const playlist_details = response.sidebar.playlistSidebarRenderer.items;\r\n\r\n    const API_KEY =\r\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\r\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\r\n        DEFAULT_API_KEY;\r\n    const videos = getPlaylistVideos(json_data, 100);\r\n\r\n    const data = playlist_details[0].playlistSidebarPrimaryInfoRenderer;\r\n    if (!data.title.runs || !data.title.runs.length) throw new Error('Failed to Parse Playlist info.');\r\n\r\n    const author = playlist_details[1]?.playlistSidebarSecondaryInfoRenderer.videoOwner;\r\n    const views = data.stats.length === 3 ? data.stats[1].simpleText.replace(/\\D/g, '') : 0;\r\n    const lastUpdate =\r\n        data.stats\r\n            .find((x: any) => 'runs' in x && x['runs'].find((y: any) => y.text.toLowerCase().includes('last update')))\r\n            ?.runs.pop()?.text ?? null;\r\n    const videosCount = data.stats[0].runs[0].text.replace(/\\D/g, '') || 0;\r\n\r\n    const res = new YouTubePlayList({\r\n        continuation: {\r\n            api: API_KEY,\r\n            token: getContinuationToken(json_data),\r\n            clientVersion:\r\n                body.split('\"INNERTUBE_CONTEXT_CLIENT_VERSION\":\"')[1]?.split('\"')[0] ??\r\n                body.split('\"innertube_context_client_version\":\"')[1]?.split('\"')[0] ??\r\n                '<some version>'\r\n        },\r\n        id: data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId,\r\n        title: data.title.runs[0].text,\r\n        videoCount: parseInt(videosCount) || 0,\r\n        lastUpdate: lastUpdate,\r\n        views: parseInt(views) || 0,\r\n        videos: videos,\r\n        url: `https://www.youtube.com/playlist?list=${data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId}`,\r\n        link: `https://www.youtube.com${data.title.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`,\r\n        channel: author\r\n            ? {\r\n                  name: author.videoOwnerRenderer.title.runs[0].text,\r\n                  id: author.videoOwnerRenderer.title.runs[0].navigationEndpoint.browseEndpoint.browseId,\r\n                  url: `https://www.youtube.com${\r\n                      author.videoOwnerRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url ||\r\n                      author.videoOwnerRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl\r\n                  }`,\r\n                  icons: author.videoOwnerRenderer.thumbnail.thumbnails ?? []\r\n              }\r\n            : {},\r\n        thumbnail: data.thumbnailRenderer.playlistVideoThumbnailRenderer?.thumbnail.thumbnails.length\r\n            ? data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails[\r\n                  data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails.length - 1\r\n              ]\r\n            : null\r\n    });\r\n    return res;\r\n}\r\n\r\nfunction getWatchPlaylistVideos(data: any, limit = Infinity): YouTubeVideo[] {\r\n    const videos: YouTubeVideo[] = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (limit === videos.length) break;\r\n        const info = data[i].playlistPanelVideoRenderer;\r\n        if (!info || !info.shortBylineText) continue;\r\n        const channel_info = info.shortBylineText.runs[0];\r\n\r\n        videos.push(\r\n            new YouTubeVideo({\r\n                id: info.videoId,\r\n                duration: parseDuration(info.lengthText?.simpleText) || 0,\r\n                duration_raw: info.lengthText?.simpleText ?? '0:00',\r\n                thumbnails: info.thumbnail.thumbnails,\r\n                title: info.title.simpleText,\r\n                upcoming:\r\n                    info.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.style === 'UPCOMING' || undefined,\r\n                channel: {\r\n                    id: channel_info.navigationEndpoint.browseEndpoint.browseId || undefined,\r\n                    name: channel_info.text || undefined,\r\n                    url: `https://www.youtube.com${\r\n                        channel_info.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n                        channel_info.navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n                    }`,\r\n                    icon: undefined\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    return videos;\r\n}\r\n\r\nfunction parseDuration(text: string): number {\r\n    if (!text) return 0;\r\n    const split = text.split(':');\r\n\r\n    switch (split.length) {\r\n        case 2:\r\n            return parseInt(split[0]) * 60 + parseInt(split[1]);\r\n\r\n        case 3:\r\n            return parseInt(split[0]) * 60 * 60 + parseInt(split[1]) * 60 + parseInt(split[2]);\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}"]}