{"version":3,"file":"Playlist.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/Playlist.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPlaylistVideos, getContinuationToken } from '../utils/extractor';\r\nimport { request } from '../../Request';\r\nimport { YouTubeChannel } from './Channel';\r\nimport { YouTubeVideo } from './Video';\r\nimport { YouTubeThumbnail } from './Thumbnail';\r\nconst BASE_API = 'https://www.youtube.com/youtubei/v1/browse?key=';\r\n/**\r\n * YouTube Playlist Class containing vital informations about playlist.\r\n */\r\nexport class YouTubePlayList {\r\n    /**\r\n     * YouTube Playlist ID\r\n     */\r\n    id?: string;\r\n    /**\r\n     * YouTube Playlist Name\r\n     */\r\n    title?: string;\r\n    /**\r\n     * YouTube Class type. == \"playlist\"\r\n     */\r\n    type: 'video' | 'playlist' | 'channel';\r\n    /**\r\n     * Total no of videos in that playlist\r\n     */\r\n    videoCount?: number;\r\n    /**\r\n     * Time when playlist was last updated\r\n     */\r\n    lastUpdate?: string;\r\n    /**\r\n     * Total views of that playlist\r\n     */\r\n    views?: number;\r\n    /**\r\n     * YouTube Playlist url\r\n     */\r\n    url?: string;\r\n    /**\r\n     * YouTube Playlist url with starting video url.\r\n     */\r\n    link?: string;\r\n    /**\r\n     * YouTube Playlist channel data\r\n     */\r\n    channel?: YouTubeChannel;\r\n    /**\r\n     * YouTube Playlist thumbnail Data\r\n     */\r\n    thumbnail?: YouTubeThumbnail;\r\n    /**\r\n     * Videos array containing data of first 100 videos\r\n     */\r\n    private videos?: YouTubeVideo[];\r\n    /**\r\n     * Map contaning data of all fetched videos\r\n     */\r\n    private fetched_videos: Map<string, YouTubeVideo[]>;\r\n    /**\r\n     * Token containing API key, Token, ClientVersion.\r\n     */\r\n    private _continuation: {\r\n        api?: string;\r\n        token?: string;\r\n        clientVersion?: string;\r\n    } = {};\r\n    /**\r\n     * Total no of pages count.\r\n     */\r\n    private __count: number;\r\n    /**\r\n     * Constructor for YouTube Playlist Class\r\n     * @param data Json Parsed YouTube Playlist data\r\n     * @param searchResult If the data is from search or not\r\n     */\r\n    constructor(data: any, searchResult = false) {\r\n        if (!data) throw new Error(`Cannot instantiate the ${this.constructor.name} class without data!`);\r\n        this.__count = 0;\r\n        this.fetched_videos = new Map();\r\n        this.type = 'playlist';\r\n        if (searchResult) this.__patchSearch(data);\r\n        else this.__patch(data);\r\n    }\r\n    /**\r\n     * Updates variable according to a normal data.\r\n     * @param data Json Parsed YouTube Playlist data\r\n     */\r\n    private __patch(data: any) {\r\n        this.id = data.id || undefined;\r\n        this.url = data.url || undefined;\r\n        this.title = data.title || undefined;\r\n        this.videoCount = data.videoCount || 0;\r\n        this.lastUpdate = data.lastUpdate || undefined;\r\n        this.views = data.views || 0;\r\n        this.link = data.link || undefined;\r\n        this.channel = new YouTubeChannel(data.channel) || undefined;\r\n        this.thumbnail = data.thumbnail ? new YouTubeThumbnail(data.thumbnail) : undefined;\r\n        this.videos = data.videos || [];\r\n        this.__count++;\r\n        this.fetched_videos.set(`${this.__count}`, this.videos as YouTubeVideo[]);\r\n        this._continuation.api = data.continuation?.api ?? undefined;\r\n        this._continuation.token = data.continuation?.token ?? undefined;\r\n        this._continuation.clientVersion = data.continuation?.clientVersion ?? '<important data>';\r\n    }\r\n    /**\r\n     * Updates variable according to a searched data.\r\n     * @param data Json Parsed YouTube Playlist data\r\n     */\r\n    private __patchSearch(data: any) {\r\n        this.id = data.id || undefined;\r\n        this.url = this.id ? `https://www.youtube.com/playlist?list=${this.id}` : undefined;\r\n        this.title = data.title || undefined;\r\n        this.thumbnail = new YouTubeThumbnail(data.thumbnail) || undefined;\r\n        this.channel = data.channel || undefined;\r\n        this.videos = [];\r\n        this.videoCount = data.videos || 0;\r\n        this.link = undefined;\r\n        this.lastUpdate = undefined;\r\n        this.views = 0;\r\n    }\r\n    /**\r\n     * Parses next segment of videos from playlist and returns parsed data.\r\n     * @param limit Total no of videos to parse.\r\n     *\r\n     * Default = Infinity\r\n     * @returns Array of YouTube Video Class\r\n     */\r\n    async next(limit = Infinity): Promise<YouTubeVideo[]> {\r\n        if (!this._continuation || !this._continuation.token) return [];\r\n\r\n        const nextPage = await request(`${BASE_API}${this._continuation.api}&prettyPrint=false`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                continuation: this._continuation.token,\r\n                context: {\r\n                    client: {\r\n                        utcOffsetMinutes: 0,\r\n                        gl: 'US',\r\n                        hl: 'en',\r\n                        clientName: 'WEB',\r\n                        clientVersion: this._continuation.clientVersion\r\n                    },\r\n                    user: {},\r\n                    request: {}\r\n                }\r\n            })\r\n        });\r\n\r\n        const contents =\r\n            JSON.parse(nextPage)?.onResponseReceivedActions[0]?.appendContinuationItemsAction?.continuationItems;\r\n        if (!contents) return [];\r\n\r\n        const playlist_videos = getPlaylistVideos(contents, limit);\r\n        this.fetched_videos.set(`${this.__count}`, playlist_videos);\r\n        this._continuation.token = getContinuationToken(contents);\r\n        return playlist_videos;\r\n    }\r\n    /**\r\n     * Fetches remaining data from playlist\r\n     *\r\n     * For fetching and getting all songs data, see `total_pages` property.\r\n     * @param max Max no of videos to fetch\r\n     *\r\n     * Default = Infinity\r\n     * @returns\r\n     */\r\n    async fetch(max = Infinity): Promise<YouTubePlayList> {\r\n        const continuation = this._continuation.token;\r\n        if (!continuation) return this;\r\n        if (max < 1) max = Infinity;\r\n\r\n        while (typeof this._continuation.token === 'string' && this._continuation.token.length) {\r\n            this.__count++;\r\n            const res = await this.next();\r\n            max -= res.length;\r\n            if (max <= 0) break;\r\n            if (!res.length) break;\r\n        }\r\n\r\n        return this;\r\n    }\r\n    /**\r\n     * YouTube Playlists are divided into pages.\r\n     *\r\n     * For example, if you want to get 101 - 200 songs\r\n     *\r\n     * ```ts\r\n     * const playlist = await play.playlist_info('playlist url')\r\n     *\r\n     * await playlist.fetch()\r\n     *\r\n     * const result = playlist.page(2)\r\n     * ```\r\n     * @param number Page number\r\n     * @returns Array of YouTube Video Class\r\n     * @see {@link YouTubePlayList.all_videos}\r\n     */\r\n    page(number: number): YouTubeVideo[] {\r\n        if (!number) throw new Error('Page number is not provided');\r\n        if (!this.fetched_videos.has(`${number}`)) throw new Error('Given Page number is invalid');\r\n        return this.fetched_videos.get(`${number}`) as YouTubeVideo[];\r\n    }\r\n    /**\r\n     * Gets total number of pages in that playlist class.\r\n     * @see {@link YouTubePlayList.all_videos}\r\n     */\r\n    get total_pages() {\r\n        return this.fetched_videos.size;\r\n    }\r\n    /**\r\n     * This tells total number of videos that have been fetched so far.\r\n     *\r\n     * This can be equal to videosCount if all videos in playlist have been fetched and they are not hidden.\r\n     */\r\n    get total_videos() {\r\n        const page_number: number = this.total_pages;\r\n        return (page_number - 1) * 100 + (this.fetched_videos.get(`${page_number}`) as YouTubeVideo[]).length;\r\n    }\r\n    /**\r\n     * Fetches all the videos in the playlist and returns them\r\n     *\r\n     * ```ts\r\n     * const playlist = await play.playlist_info('playlist url')\r\n     *\r\n     * const videos = await playlist.all_videos()\r\n     * ```\r\n     * @returns An array of {@link YouTubeVideo} objects\r\n     * @see {@link YouTubePlayList.fetch}\r\n     */\r\n    async all_videos(): Promise<YouTubeVideo[]> {\r\n        await this.fetch();\r\n\r\n        const videos = [];\r\n\r\n        for (const page of this.fetched_videos.values()) videos.push(...page);\r\n\r\n        return videos;\r\n    }\r\n    /**\r\n     * Converts Playlist Class to a json parsed data.\r\n     * @returns\r\n     */\r\n    toJSON(): PlaylistJSON {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            thumbnail: this.thumbnail?.toJSON() || this.thumbnail,\r\n            channel: this.channel,\r\n            url: this.url,\r\n            videos: this.videos\r\n        };\r\n    }\r\n}\r\n\r\ninterface PlaylistJSON {\r\n    /**\r\n     * YouTube Playlist ID\r\n     */\r\n    id?: string;\r\n    /**\r\n     * YouTube Playlist Name\r\n     */\r\n    title?: string;\r\n    /**\r\n     * Total no of videos in that playlist\r\n     */\r\n    videoCount?: number;\r\n    /**\r\n     * Time when playlist was last updated\r\n     */\r\n    lastUpdate?: string;\r\n    /**\r\n     * Total views of that playlist\r\n     */\r\n    views?: number;\r\n    /**\r\n     * YouTube Playlist url\r\n     */\r\n    url?: string;\r\n    /**\r\n     * YouTube Playlist url with starting video url.\r\n     */\r\n    link?: string;\r\n    /**\r\n     * YouTube Playlist channel data\r\n     */\r\n    channel?: YouTubeChannel;\r\n    /**\r\n     * YouTube Playlist thumbnail Data\r\n     */\r\n    thumbnail?: {\r\n        width: number | undefined;\r\n        height: number | undefined;\r\n        url: string | undefined;\r\n    };\r\n    /**\r\n     * first 100 videos in that playlist\r\n     */\r\n    videos?: YouTubeVideo[];\r\n}\r\n"]}